{"ast":null,"code":"import _objectSpread from \"/Users/jenniferhe/Documents/GitHub/oval/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/Users/jenniferhe/Documents/GitHub/oval/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/jenniferhe/Documents/GitHub/oval/node_modules/@babel/runtime/regenerator/index.js\";\nimport { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport var createLinks = configure(function (api) {\n  function links(_x) {\n    return _links.apply(this, arguments);\n  }\n\n  function _links() {\n    _links = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(cid) {\n      var options,\n          res,\n          data,\n          _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              _context.next = 3;\n              return api.post('object/links', {\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: \"\".concat(cid instanceof Uint8Array ? CID.decode(cid) : cid)\n                }, options)),\n                headers: options.headers\n              });\n\n            case 3:\n              res = _context.sent;\n              _context.next = 6;\n              return res.json();\n\n            case 6:\n              data = _context.sent;\n              return _context.abrupt(\"return\", (data.Links || []).map(function (l) {\n                return {\n                  Name: l.Name,\n                  Tsize: l.Size,\n                  Hash: CID.parse(l.Hash)\n                };\n              }));\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _links.apply(this, arguments);\n  }\n\n  return links;\n});","map":{"version":3,"sources":["/Users/jenniferhe/Documents/GitHub/oval/node_modules/ipfs-http-client/esm/src/object/links.js"],"names":["CID","configure","toUrlSearchParams","createLinks","api","links","cid","options","post","signal","searchParams","arg","Uint8Array","decode","headers","res","json","data","Links","map","l","Name","Tsize","Size","Hash","parse"],"mappings":";;;AAAA,SAASA,GAAT,QAAoB,kBAApB;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,OAAO,IAAMC,WAAW,GAAGF,SAAS,CAAC,UAAAG,GAAG,EAAI;AAAA,WAC3BC,KAD2B;AAAA;AAAA;;AAAA;AAAA,sEAC1C,iBAAqBC,GAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0BC,cAAAA,OAA1B,2DAAoC,EAApC;AAAA;AAAA,qBACoBH,GAAG,CAACI,IAAJ,CAAS,cAAT,EAAyB;AACzCC,gBAAAA,MAAM,EAAEF,OAAO,CAACE,MADyB;AAEzCC,gBAAAA,YAAY,EAAER,iBAAiB;AAC7BS,kBAAAA,GAAG,YAAML,GAAG,YAAYM,UAAf,GAA4BZ,GAAG,CAACa,MAAJ,CAAWP,GAAX,CAA5B,GAA8CA,GAApD;AAD0B,mBAE1BC,OAF0B,EAFU;AAMzCO,gBAAAA,OAAO,EAAEP,OAAO,CAACO;AANwB,eAAzB,CADpB;;AAAA;AACQC,cAAAA,GADR;AAAA;AAAA,qBASqBA,GAAG,CAACC,IAAJ,EATrB;;AAAA;AASQC,cAAAA,IATR;AAAA,+CAUS,CAACA,IAAI,CAACC,KAAL,IAAc,EAAf,EAAmBC,GAAnB,CAAuB,UAAAC,CAAC;AAAA,uBAAK;AAClCC,kBAAAA,IAAI,EAAED,CAAC,CAACC,IAD0B;AAElCC,kBAAAA,KAAK,EAAEF,CAAC,CAACG,IAFyB;AAGlCC,kBAAAA,IAAI,EAAExB,GAAG,CAACyB,KAAJ,CAAUL,CAAC,CAACI,IAAZ;AAH4B,iBAAL;AAAA,eAAxB,CAVT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAD0C;AAAA;AAAA;;AAiB1C,SAAOnB,KAAP;AACD,CAlBmC,CAA7B","sourcesContent":["import { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport const createLinks = configure(api => {\n  async function links(cid, options = {}) {\n    const res = await api.post('object/links', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${ cid instanceof Uint8Array ? CID.decode(cid) : cid }`,\n        ...options\n      }),\n      headers: options.headers\n    });\n    const data = await res.json();\n    return (data.Links || []).map(l => ({\n      Name: l.Name,\n      Tsize: l.Size,\n      Hash: CID.parse(l.Hash)\n    }));\n  }\n  return links;\n});"]},"metadata":{},"sourceType":"module"}