{"ast":null,"code":"import _objectSpread from \"/Users/jenniferhe/Documents/GitHub/oval/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/Users/jenniferhe/Documents/GitHub/oval/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/jenniferhe/Documents/GitHub/oval/node_modules/@babel/runtime/regenerator/index.js\";\nimport { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport var createCp = configure(function (api) {\n  function cp(_x, _x2) {\n    return _cp.apply(this, arguments);\n  }\n\n  function _cp() {\n    _cp = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(sources, destination) {\n      var options,\n          sourceArr,\n          res,\n          _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n              sourceArr = Array.isArray(sources) ? sources : [sources];\n              _context.next = 4;\n              return api.post('files/cp', {\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: sourceArr.concat(destination).map(function (src) {\n                    return CID.asCID(src) ? \"/ipfs/\".concat(src) : src;\n                  })\n                }, options)),\n                headers: options.headers\n              });\n\n            case 4:\n              res = _context.sent;\n              _context.next = 7;\n              return res.text();\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _cp.apply(this, arguments);\n  }\n\n  return cp;\n});","map":{"version":3,"sources":["/Users/jenniferhe/Documents/GitHub/oval/node_modules/ipfs-http-client/esm/src/files/cp.js"],"names":["CID","configure","toUrlSearchParams","createCp","api","cp","sources","destination","options","sourceArr","Array","isArray","post","signal","searchParams","arg","concat","map","src","asCID","headers","res","text"],"mappings":";;;AAAA,SAASA,GAAT,QAAoB,kBAApB;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,OAAO,IAAMC,QAAQ,GAAGF,SAAS,CAAC,UAAAG,GAAG,EAAI;AAAA,WACxBC,EADwB;AAAA;AAAA;;AAAA;AAAA,mEACvC,iBAAkBC,OAAlB,EAA2BC,WAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwCC,cAAAA,OAAxC,2DAAkD,EAAlD;AACQC,cAAAA,SADR,GACoBC,KAAK,CAACC,OAAN,CAAcL,OAAd,IAAyBA,OAAzB,GAAmC,CAACA,OAAD,CADvD;AAAA;AAAA,qBAEoBF,GAAG,CAACQ,IAAJ,CAAS,UAAT,EAAqB;AACrCC,gBAAAA,MAAM,EAAEL,OAAO,CAACK,MADqB;AAErCC,gBAAAA,YAAY,EAAEZ,iBAAiB;AAC7Ba,kBAAAA,GAAG,EAAEN,SAAS,CAACO,MAAV,CAAiBT,WAAjB,EAA8BU,GAA9B,CAAkC,UAAAC,GAAG;AAAA,2BAAIlB,GAAG,CAACmB,KAAJ,CAAUD,GAAV,oBAA2BA,GAA3B,IAAoCA,GAAxC;AAAA,mBAArC;AADwB,mBAE1BV,OAF0B,EAFM;AAMrCY,gBAAAA,OAAO,EAAEZ,OAAO,CAACY;AANoB,eAArB,CAFpB;;AAAA;AAEQC,cAAAA,GAFR;AAAA;AAAA,qBAUQA,GAAG,CAACC,IAAJ,EAVR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADuC;AAAA;AAAA;;AAavC,SAAOjB,EAAP;AACD,CAdgC,CAA1B","sourcesContent":["import { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport const createCp = configure(api => {\n  async function cp(sources, destination, options = {}) {\n    const sourceArr = Array.isArray(sources) ? sources : [sources];\n    const res = await api.post('files/cp', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: sourceArr.concat(destination).map(src => CID.asCID(src) ? `/ipfs/${ src }` : src),\n        ...options\n      }),\n      headers: options.headers\n    });\n    await res.text();\n  }\n  return cp;\n});"]},"metadata":{},"sourceType":"module"}