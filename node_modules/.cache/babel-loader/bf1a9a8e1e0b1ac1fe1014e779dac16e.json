{"ast":null,"code":"import _asyncToGenerator from \"/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _wrapAsyncGenerator from \"/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _awaitAsyncGenerator from \"/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _asyncIterator from \"/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport _asyncGeneratorDelegate from \"/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/@babel/runtime/helpers/esm/asyncGeneratorDelegate.js\";\nimport _regeneratorRuntime from \"/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/@babel/runtime/regenerator/index.js\";\nimport errCode from 'err-code';\nimport browserStreamToIt from 'browser-readablestream-to-it';\nimport itPeekable from 'it-peekable';\nimport map from 'it-map';\nimport { isBytes, isBlob, isReadableStream, isFileObject } from './utils.js';\nimport { parseMtime, parseMode } from 'ipfs-unixfs';\nexport function normaliseCandidateMultiple(_x, _x2) {\n  return _normaliseCandidateMultiple.apply(this, arguments);\n}\n\nfunction _normaliseCandidateMultiple() {\n  _normaliseCandidateMultiple = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(input, normaliseContent) {\n    var peekable, _yield$_awaitAsyncGen, value, done;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(typeof input === 'string' || input instanceof String || isBytes(input) || isBlob(input) || input._readableState)) {\n              _context.next = 2;\n              break;\n            }\n\n            throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT');\n\n          case 2:\n            if (isReadableStream(input)) {\n              input = browserStreamToIt(input);\n            }\n\n            if (!(Symbol.iterator in input || Symbol.asyncIterator in input)) {\n              _context.next = 26;\n              break;\n            }\n\n            peekable = itPeekable(input);\n            _context.next = 7;\n            return _awaitAsyncGenerator(peekable.peek());\n\n          case 7:\n            _yield$_awaitAsyncGen = _context.sent;\n            value = _yield$_awaitAsyncGen.value;\n            done = _yield$_awaitAsyncGen.done;\n\n            if (!done) {\n              _context.next = 13;\n              break;\n            }\n\n            return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator([]), _awaitAsyncGenerator), \"t0\", 12);\n\n          case 12:\n            return _context.abrupt(\"return\");\n\n          case 13:\n            peekable.push(value);\n\n            if (!Number.isInteger(value)) {\n              _context.next = 16;\n              break;\n            }\n\n            throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT');\n\n          case 16:\n            if (!value._readableState) {\n              _context.next = 19;\n              break;\n            }\n\n            return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator(map(peekable, function (value) {\n              return toFileObject({\n                content: value\n              }, normaliseContent);\n            })), _awaitAsyncGenerator), \"t1\", 18);\n\n          case 18:\n            return _context.abrupt(\"return\");\n\n          case 19:\n            if (!isBytes(value)) {\n              _context.next = 23;\n              break;\n            }\n\n            _context.next = 22;\n            return toFileObject({\n              content: peekable\n            }, normaliseContent);\n\n          case 22:\n            return _context.abrupt(\"return\");\n\n          case 23:\n            if (!(isFileObject(value) || value[Symbol.iterator] || value[Symbol.asyncIterator] || isReadableStream(value) || isBlob(value))) {\n              _context.next = 26;\n              break;\n            }\n\n            return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator(map(peekable, function (value) {\n              return toFileObject(value, normaliseContent);\n            })), _awaitAsyncGenerator), \"t2\", 25);\n\n          case 25:\n            return _context.abrupt(\"return\");\n\n          case 26:\n            if (!isFileObject(input)) {\n              _context.next = 28;\n              break;\n            }\n\n            throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT');\n\n          case 28:\n            throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n\n          case 29:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _normaliseCandidateMultiple.apply(this, arguments);\n}\n\nfunction toFileObject(_x3, _x4) {\n  return _toFileObject.apply(this, arguments);\n}\n\nfunction _toFileObject() {\n  _toFileObject = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(input, normaliseContent) {\n    var path, mode, mtime, content, file;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            path = input.path, mode = input.mode, mtime = input.mtime, content = input.content;\n            file = {\n              path: path || '',\n              mode: parseMode(mode),\n              mtime: parseMtime(mtime)\n            };\n\n            if (!content) {\n              _context2.next = 8;\n              break;\n            }\n\n            _context2.next = 5;\n            return normaliseContent(content);\n\n          case 5:\n            file.content = _context2.sent;\n            _context2.next = 12;\n            break;\n\n          case 8:\n            if (path) {\n              _context2.next = 12;\n              break;\n            }\n\n            _context2.next = 11;\n            return normaliseContent(input);\n\n          case 11:\n            file.content = _context2.sent;\n\n          case 12:\n            return _context2.abrupt(\"return\", file);\n\n          case 13:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _toFileObject.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/ipfs-core-utils/esm/src/files/normalise-candidate-multiple.js"],"names":["errCode","browserStreamToIt","itPeekable","map","isBytes","isBlob","isReadableStream","isFileObject","parseMtime","parseMode","normaliseCandidateMultiple","input","normaliseContent","String","_readableState","Error","Symbol","iterator","asyncIterator","peekable","peek","value","done","push","Number","isInteger","toFileObject","content","path","mode","mtime","file"],"mappings":"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","sourcesContent":["import errCode from 'err-code';\nimport browserStreamToIt from 'browser-readablestream-to-it';\nimport itPeekable from 'it-peekable';\nimport map from 'it-map';\nimport {\n  isBytes,\n  isBlob,\n  isReadableStream,\n  isFileObject\n} from './utils.js';\nimport {\n  parseMtime,\n  parseMode\n} from 'ipfs-unixfs';\nexport async function* normaliseCandidateMultiple(input, normaliseContent) {\n  if (typeof input === 'string' || input instanceof String || isBytes(input) || isBlob(input) || input._readableState) {\n    throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT');\n  }\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input);\n  }\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    const peekable = itPeekable(input);\n    const {value, done} = await peekable.peek();\n    if (done) {\n      yield* [];\n      return;\n    }\n    peekable.push(value);\n    if (Number.isInteger(value)) {\n      throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT');\n    }\n    if (value._readableState) {\n      yield* map(peekable, value => toFileObject({ content: value }, normaliseContent));\n      return;\n    }\n    if (isBytes(value)) {\n      yield toFileObject({ content: peekable }, normaliseContent);\n      return;\n    }\n    if (isFileObject(value) || value[Symbol.iterator] || value[Symbol.asyncIterator] || isReadableStream(value) || isBlob(value)) {\n      yield* map(peekable, value => toFileObject(value, normaliseContent));\n      return;\n    }\n  }\n  if (isFileObject(input)) {\n    throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT');\n  }\n  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n}\nasync function toFileObject(input, normaliseContent) {\n  const {path, mode, mtime, content} = input;\n  const file = {\n    path: path || '',\n    mode: parseMode(mode),\n    mtime: parseMtime(mtime)\n  };\n  if (content) {\n    file.content = await normaliseContent(content);\n  } else if (!path) {\n    file.content = await normaliseContent(input);\n  }\n  return file;\n}"]},"metadata":{},"sourceType":"module"}