{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/jenniferhe/Documents/GitHub/oval/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _objectSpread from \"/Users/jenniferhe/Documents/GitHub/oval/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _awaitAsyncGenerator from \"/Users/jenniferhe/Documents/GitHub/oval/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _wrapAsyncGenerator from \"/Users/jenniferhe/Documents/GitHub/oval/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _asyncIterator from \"/Users/jenniferhe/Documents/GitHub/oval/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport _regeneratorRuntime from \"/Users/jenniferhe/Documents/GitHub/oval/node_modules/@babel/runtime/regenerator/index.js\";\nimport { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { normaliseInput } from 'ipfs-core-utils/pins/normalise-input';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport var createAddAll = configure(function (api) {\n  function addAll(_x) {\n    return _addAll.apply(this, arguments);\n  }\n\n  function _addAll() {\n    _addAll = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(source) {\n      var options,\n          _iteratorAbruptCompletion,\n          _didIteratorError,\n          _iteratorError,\n          _iterator,\n          _step,\n          _step$value,\n          path,\n          recursive,\n          metadata,\n          res,\n          _iteratorAbruptCompletion2,\n          _didIteratorError2,\n          _iteratorError2,\n          _iterator2,\n          _step2,\n          pin,\n          _iterator3,\n          _step3,\n          cid,\n          _args = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context.prev = 3;\n              _iterator = _asyncIterator(normaliseInput(source));\n\n            case 5:\n              _context.next = 7;\n              return _awaitAsyncGenerator(_iterator.next());\n\n            case 7:\n              if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n                _context.next = 63;\n                break;\n              }\n\n              _step$value = _step.value, path = _step$value.path, recursive = _step$value.recursive, metadata = _step$value.metadata;\n              _context.next = 11;\n              return _awaitAsyncGenerator(api.post('pin/add', {\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread(_objectSpread({}, options), {}, {\n                  arg: path,\n                  recursive: recursive,\n                  metadata: metadata ? JSON.stringify(metadata) : undefined,\n                  stream: true\n                })),\n                headers: options.headers\n              }));\n\n            case 11:\n              res = _context.sent;\n              _iteratorAbruptCompletion2 = false;\n              _didIteratorError2 = false;\n              _context.prev = 14;\n              _iterator2 = _asyncIterator(res.ndjson());\n\n            case 16:\n              _context.next = 18;\n              return _awaitAsyncGenerator(_iterator2.next());\n\n            case 18:\n              if (!(_iteratorAbruptCompletion2 = !(_step2 = _context.sent).done)) {\n                _context.next = 44;\n                break;\n              }\n\n              pin = _step2.value;\n\n              if (!pin.Pins) {\n                _context.next = 39;\n                break;\n              }\n\n              _iterator3 = _createForOfIteratorHelper(pin.Pins);\n              _context.prev = 22;\n\n              _iterator3.s();\n\n            case 24:\n              if ((_step3 = _iterator3.n()).done) {\n                _context.next = 30;\n                break;\n              }\n\n              cid = _step3.value;\n              _context.next = 28;\n              return CID.parse(cid);\n\n            case 28:\n              _context.next = 24;\n              break;\n\n            case 30:\n              _context.next = 35;\n              break;\n\n            case 32:\n              _context.prev = 32;\n              _context.t0 = _context[\"catch\"](22);\n\n              _iterator3.e(_context.t0);\n\n            case 35:\n              _context.prev = 35;\n\n              _iterator3.f();\n\n              return _context.finish(35);\n\n            case 38:\n              return _context.abrupt(\"continue\", 41);\n\n            case 39:\n              _context.next = 41;\n              return CID.parse(pin);\n\n            case 41:\n              _iteratorAbruptCompletion2 = false;\n              _context.next = 16;\n              break;\n\n            case 44:\n              _context.next = 50;\n              break;\n\n            case 46:\n              _context.prev = 46;\n              _context.t1 = _context[\"catch\"](14);\n              _didIteratorError2 = true;\n              _iteratorError2 = _context.t1;\n\n            case 50:\n              _context.prev = 50;\n              _context.prev = 51;\n\n              if (!(_iteratorAbruptCompletion2 && _iterator2.return != null)) {\n                _context.next = 55;\n                break;\n              }\n\n              _context.next = 55;\n              return _awaitAsyncGenerator(_iterator2.return());\n\n            case 55:\n              _context.prev = 55;\n\n              if (!_didIteratorError2) {\n                _context.next = 58;\n                break;\n              }\n\n              throw _iteratorError2;\n\n            case 58:\n              return _context.finish(55);\n\n            case 59:\n              return _context.finish(50);\n\n            case 60:\n              _iteratorAbruptCompletion = false;\n              _context.next = 5;\n              break;\n\n            case 63:\n              _context.next = 69;\n              break;\n\n            case 65:\n              _context.prev = 65;\n              _context.t2 = _context[\"catch\"](3);\n              _didIteratorError = true;\n              _iteratorError = _context.t2;\n\n            case 69:\n              _context.prev = 69;\n              _context.prev = 70;\n\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context.next = 74;\n                break;\n              }\n\n              _context.next = 74;\n              return _awaitAsyncGenerator(_iterator.return());\n\n            case 74:\n              _context.prev = 74;\n\n              if (!_didIteratorError) {\n                _context.next = 77;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 77:\n              return _context.finish(74);\n\n            case 78:\n              return _context.finish(69);\n\n            case 79:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3, 65, 69, 79], [14, 46, 50, 60], [22, 32, 35, 38], [51,, 55, 59], [70,, 74, 78]]);\n    }));\n    return _addAll.apply(this, arguments);\n  }\n\n  return addAll;\n});","map":{"version":3,"sources":["/Users/jenniferhe/Documents/GitHub/oval/node_modules/ipfs-http-client/esm/src/pin/add-all.js"],"names":["CID","configure","normaliseInput","toUrlSearchParams","createAddAll","api","addAll","source","options","path","recursive","metadata","post","signal","searchParams","arg","JSON","stringify","undefined","stream","headers","res","ndjson","pin","Pins","cid","parse"],"mappings":";;;;;;AAAA,SAASA,GAAT,QAAoB,kBAApB;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,cAAT,QAA+B,sCAA/B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,OAAO,IAAMC,YAAY,GAAGH,SAAS,CAAC,UAAAI,GAAG,EAAI;AAAA,WAC3BC,MAD2B;AAAA;AAAA;;AAAA;AAAA,yEAC3C,iBAAuBC,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAA+BC,cAAAA,OAA/B,2DAAyC,EAAzC;AAAA;AAAA;AAAA;AAAA,yCACkDN,cAAc,CAACK,MAAD,CADhE;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,yCACoBE,IADpB,eACoBA,IADpB,EAC0BC,SAD1B,eAC0BA,SAD1B,EACqCC,QADrC,eACqCA,QADrC;AAAA;AAAA,0CAEsBN,GAAG,CAACO,IAAJ,CAAS,SAAT,EAAoB;AACpCC,gBAAAA,MAAM,EAAEL,OAAO,CAACK,MADoB;AAEpCC,gBAAAA,YAAY,EAAEX,iBAAiB,iCAC1BK,OAD0B;AAE7BO,kBAAAA,GAAG,EAAEN,IAFwB;AAG7BC,kBAAAA,SAAS,EAATA,SAH6B;AAI7BC,kBAAAA,QAAQ,EAAEA,QAAQ,GAAGK,IAAI,CAACC,SAAL,CAAeN,QAAf,CAAH,GAA8BO,SAJnB;AAK7BC,kBAAAA,MAAM,EAAE;AALqB,mBAFK;AASpCC,gBAAAA,OAAO,EAAEZ,OAAO,CAACY;AATmB,eAApB,CAFtB;;AAAA;AAEUC,cAAAA,GAFV;AAAA;AAAA;AAAA;AAAA,0CAa4BA,GAAG,CAACC,MAAJ,EAb5B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAaqBC,cAAAA,GAbrB;;AAAA,mBAcUA,GAAG,CAACC,IAdd;AAAA;AAAA;AAAA;;AAAA,sDAe0BD,GAAG,CAACC,IAf9B;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAemBC,cAAAA,GAfnB;AAAA;AAgBU,qBAAMzB,GAAG,CAAC0B,KAAJ,CAAUD,GAAV,CAAN;;AAhBV;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAoBM,qBAAMzB,GAAG,CAAC0B,KAAJ,CAAUH,GAAV,CAAN;;AApBN;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAD2C;AAAA;AAAA;;AAyB3C,SAAOjB,MAAP;AACD,CA1BoC,CAA9B","sourcesContent":["import { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { normaliseInput } from 'ipfs-core-utils/pins/normalise-input';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport const createAddAll = configure(api => {\n  async function* addAll(source, options = {}) {\n    for await (const {path, recursive, metadata} of normaliseInput(source)) {\n      const res = await api.post('pin/add', {\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          ...options,\n          arg: path,\n          recursive,\n          metadata: metadata ? JSON.stringify(metadata) : undefined,\n          stream: true\n        }),\n        headers: options.headers\n      });\n      for await (const pin of res.ndjson()) {\n        if (pin.Pins) {\n          for (const cid of pin.Pins) {\n            yield CID.parse(cid);\n          }\n          continue;\n        }\n        yield CID.parse(pin);\n      }\n    }\n  }\n  return addAll;\n});"]},"metadata":{},"sourceType":"module"}