{"ast":null,"code":"import _asyncToGenerator from \"/Users/jenniferhe/Documents/GitHub/oval/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/jenniferhe/Documents/GitHub/oval/node_modules/@babel/runtime/regenerator/index.js\";\nimport { Multiaddr } from 'multiaddr';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport var createAddrs = configure(function (api) {\n  function addrs() {\n    return _addrs.apply(this, arguments);\n  }\n\n  function _addrs() {\n    _addrs = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var options,\n          res,\n          _yield$res$json,\n          Addrs,\n          _args = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n              _context.next = 3;\n              return api.post('swarm/addrs', {\n                signal: options.signal,\n                searchParams: toUrlSearchParams(options),\n                headers: options.headers\n              });\n\n            case 3:\n              res = _context.sent;\n              _context.next = 6;\n              return res.json();\n\n            case 6:\n              _yield$res$json = _context.sent;\n              Addrs = _yield$res$json.Addrs;\n              return _context.abrupt(\"return\", Object.keys(Addrs).map(function (id) {\n                return {\n                  id: id,\n                  addrs: (Addrs[id] || []).map(function (a) {\n                    return new Multiaddr(a);\n                  })\n                };\n              }));\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _addrs.apply(this, arguments);\n  }\n\n  return addrs;\n});","map":{"version":3,"sources":["/Users/jenniferhe/Documents/GitHub/oval/node_modules/ipfs-http-client/esm/src/swarm/addrs.js"],"names":["Multiaddr","configure","toUrlSearchParams","createAddrs","api","addrs","options","post","signal","searchParams","headers","res","json","Addrs","Object","keys","map","id","a"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,WAA1B;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,OAAO,IAAMC,WAAW,GAAGF,SAAS,CAAC,UAAAG,GAAG,EAAI;AAAA,WAC3BC,KAD2B;AAAA;AAAA;;AAAA;AAAA,sEAC1C;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAqBC,cAAAA,OAArB,2DAA+B,EAA/B;AAAA;AAAA,qBACoBF,GAAG,CAACG,IAAJ,CAAS,aAAT,EAAwB;AACxCC,gBAAAA,MAAM,EAAEF,OAAO,CAACE,MADwB;AAExCC,gBAAAA,YAAY,EAAEP,iBAAiB,CAACI,OAAD,CAFS;AAGxCI,gBAAAA,OAAO,EAAEJ,OAAO,CAACI;AAHuB,eAAxB,CADpB;;AAAA;AACQC,cAAAA,GADR;AAAA;AAAA,qBAMwBA,GAAG,CAACC,IAAJ,EANxB;;AAAA;AAAA;AAMSC,cAAAA,KANT,mBAMSA,KANT;AAAA,+CAOSC,MAAM,CAACC,IAAP,CAAYF,KAAZ,EAAmBG,GAAnB,CAAuB,UAAAC,EAAE;AAAA,uBAAK;AACnCA,kBAAAA,EAAE,EAAFA,EADmC;AAEnCZ,kBAAAA,KAAK,EAAE,CAACQ,KAAK,CAACI,EAAD,CAAL,IAAa,EAAd,EAAkBD,GAAlB,CAAsB,UAAAE,CAAC;AAAA,2BAAI,IAAIlB,SAAJ,CAAckB,CAAd,CAAJ;AAAA,mBAAvB;AAF4B,iBAAL;AAAA,eAAzB,CAPT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAD0C;AAAA;AAAA;;AAa1C,SAAOb,KAAP;AACD,CAdmC,CAA7B","sourcesContent":["import { Multiaddr } from 'multiaddr';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport const createAddrs = configure(api => {\n  async function addrs(options = {}) {\n    const res = await api.post('swarm/addrs', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    });\n    const {Addrs} = await res.json();\n    return Object.keys(Addrs).map(id => ({\n      id,\n      addrs: (Addrs[id] || []).map(a => new Multiaddr(a))\n    }));\n  }\n  return addrs;\n});"]},"metadata":{},"sourceType":"module"}