{"ast":null,"code":"import _asyncToGenerator from \"/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _awaitAsyncGenerator from \"/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _wrapAsyncGenerator from \"/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _regeneratorRuntime from \"/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/@babel/runtime/regenerator/index.js\";\nimport errCode from 'err-code';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport browserStreamToIt from 'browser-readablestream-to-it';\nimport blobToIt from 'blob-to-it';\nimport itPeekable from 'it-peekable';\nimport all from 'it-all';\nimport map from 'it-map';\nimport { isBytes, isReadableStream, isBlob } from './utils.js';\n\nfunction toAsyncIterable(_x) {\n  return _toAsyncIterable.apply(this, arguments);\n}\n\nfunction _toAsyncIterable() {\n  _toAsyncIterable = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(thing) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return thing;\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _toAsyncIterable.apply(this, arguments);\n}\n\nexport function normaliseContent(_x2) {\n  return _normaliseContent.apply(this, arguments);\n}\n\nfunction _normaliseContent() {\n  _normaliseContent = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(input) {\n    var peekable, _yield$peekable$peek, value, done;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!isBytes(input)) {\n              _context2.next = 2;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", toAsyncIterable(toBytes(input)));\n\n          case 2:\n            if (!(typeof input === 'string' || input instanceof String)) {\n              _context2.next = 4;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", toAsyncIterable(toBytes(input.toString())));\n\n          case 4:\n            if (!isBlob(input)) {\n              _context2.next = 6;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", blobToIt(input));\n\n          case 6:\n            if (isReadableStream(input)) {\n              input = browserStreamToIt(input);\n            }\n\n            if (!(Symbol.iterator in input || Symbol.asyncIterator in input)) {\n              _context2.next = 27;\n              break;\n            }\n\n            peekable = itPeekable(input);\n            _context2.next = 11;\n            return peekable.peek();\n\n          case 11:\n            _yield$peekable$peek = _context2.sent;\n            value = _yield$peekable$peek.value;\n            done = _yield$peekable$peek.done;\n\n            if (!done) {\n              _context2.next = 16;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", toAsyncIterable(new Uint8Array(0)));\n\n          case 16:\n            peekable.push(value);\n\n            if (!Number.isInteger(value)) {\n              _context2.next = 25;\n              break;\n            }\n\n            _context2.t0 = toAsyncIterable;\n            _context2.t1 = Uint8Array;\n            _context2.next = 22;\n            return all(peekable);\n\n          case 22:\n            _context2.t2 = _context2.sent;\n            _context2.t3 = _context2.t1.from.call(_context2.t1, _context2.t2);\n            return _context2.abrupt(\"return\", (0, _context2.t0)(_context2.t3));\n\n          case 25:\n            if (!(isBytes(value) || typeof value === 'string' || value instanceof String)) {\n              _context2.next = 27;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", map(peekable, toBytes));\n\n          case 27:\n            throw errCode(new Error(\"Unexpected input: \".concat(input)), 'ERR_UNEXPECTED_INPUT');\n\n          case 28:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _normaliseContent.apply(this, arguments);\n}\n\nfunction toBytes(chunk) {\n  if (chunk instanceof Uint8Array) {\n    return chunk;\n  }\n\n  if (ArrayBuffer.isView(chunk)) {\n    return new Uint8Array(chunk.buffer, chunk.byteOffset, chunk.byteLength);\n  }\n\n  if (chunk instanceof ArrayBuffer) {\n    return new Uint8Array(chunk);\n  }\n\n  if (Array.isArray(chunk)) {\n    return Uint8Array.from(chunk);\n  }\n\n  return uint8ArrayFromString(chunk.toString());\n}","map":{"version":3,"sources":["/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/ipfs-core-utils/esm/src/files/normalise-content.js"],"names":["errCode","fromString","uint8ArrayFromString","browserStreamToIt","blobToIt","itPeekable","all","map","isBytes","isReadableStream","isBlob","toAsyncIterable","thing","normaliseContent","input","toBytes","String","toString","Symbol","iterator","asyncIterator","peekable","peek","value","done","Uint8Array","push","Number","isInteger","from","Error","chunk","ArrayBuffer","isView","buffer","byteOffset","byteLength","Array","isArray"],"mappings":"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","sourcesContent":["import errCode from 'err-code';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport browserStreamToIt from 'browser-readablestream-to-it';\nimport blobToIt from 'blob-to-it';\nimport itPeekable from 'it-peekable';\nimport all from 'it-all';\nimport map from 'it-map';\nimport {\n  isBytes,\n  isReadableStream,\n  isBlob\n} from './utils.js';\nasync function* toAsyncIterable(thing) {\n  yield thing;\n}\nexport async function normaliseContent(input) {\n  if (isBytes(input)) {\n    return toAsyncIterable(toBytes(input));\n  }\n  if (typeof input === 'string' || input instanceof String) {\n    return toAsyncIterable(toBytes(input.toString()));\n  }\n  if (isBlob(input)) {\n    return blobToIt(input);\n  }\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input);\n  }\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    const peekable = itPeekable(input);\n    const {value, done} = await peekable.peek();\n    if (done) {\n      return toAsyncIterable(new Uint8Array(0));\n    }\n    peekable.push(value);\n    if (Number.isInteger(value)) {\n      return toAsyncIterable(Uint8Array.from(await all(peekable)));\n    }\n    if (isBytes(value) || typeof value === 'string' || value instanceof String) {\n      return map(peekable, toBytes);\n    }\n  }\n  throw errCode(new Error(`Unexpected input: ${ input }`), 'ERR_UNEXPECTED_INPUT');\n}\nfunction toBytes(chunk) {\n  if (chunk instanceof Uint8Array) {\n    return chunk;\n  }\n  if (ArrayBuffer.isView(chunk)) {\n    return new Uint8Array(chunk.buffer, chunk.byteOffset, chunk.byteLength);\n  }\n  if (chunk instanceof ArrayBuffer) {\n    return new Uint8Array(chunk);\n  }\n  if (Array.isArray(chunk)) {\n    return Uint8Array.from(chunk);\n  }\n  return uint8ArrayFromString(chunk.toString());\n}"]},"metadata":{},"sourceType":"module"}