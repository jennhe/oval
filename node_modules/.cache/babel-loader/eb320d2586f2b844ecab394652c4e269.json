{"ast":null,"code":"import _asyncToGenerator from \"/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _asyncIterator from \"/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport _regeneratorRuntime from \"/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/@babel/runtime/regenerator/index.js\";\nimport errCode from 'err-code';\nimport itPeekable from 'it-peekable';\nimport browserStreamToIt from 'browser-readablestream-to-it';\nimport all from 'it-all';\nimport { isBytes, isBlob, isReadableStream } from './utils.js';\nexport function normaliseContent(_x) {\n  return _normaliseContent.apply(this, arguments);\n}\n\nfunction _normaliseContent() {\n  _normaliseContent = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(input) {\n    var peekable, _yield$peekable$peek, value, done;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!isBytes(input)) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\", new Blob([input]));\n\n          case 2:\n            if (!(typeof input === 'string' || input instanceof String)) {\n              _context.next = 4;\n              break;\n            }\n\n            return _context.abrupt(\"return\", new Blob([input.toString()]));\n\n          case 4:\n            if (!isBlob(input)) {\n              _context.next = 6;\n              break;\n            }\n\n            return _context.abrupt(\"return\", input);\n\n          case 6:\n            if (isReadableStream(input)) {\n              input = browserStreamToIt(input);\n            }\n\n            if (!(Symbol.iterator in input || Symbol.asyncIterator in input)) {\n              _context.next = 28;\n              break;\n            }\n\n            peekable = itPeekable(input);\n            _context.next = 11;\n            return peekable.peek();\n\n          case 11:\n            _yield$peekable$peek = _context.sent;\n            value = _yield$peekable$peek.value;\n            done = _yield$peekable$peek.done;\n\n            if (!done) {\n              _context.next = 16;\n              break;\n            }\n\n            return _context.abrupt(\"return\", itToBlob(peekable));\n\n          case 16:\n            peekable.push(value);\n\n            if (!Number.isInteger(value)) {\n              _context.next = 26;\n              break;\n            }\n\n            _context.t0 = Blob;\n            _context.t1 = Uint8Array;\n            _context.next = 22;\n            return all(peekable);\n\n          case 22:\n            _context.t2 = _context.sent;\n            _context.t3 = _context.t1.from.call(_context.t1, _context.t2);\n            _context.t4 = [_context.t3];\n            return _context.abrupt(\"return\", new _context.t0(_context.t4));\n\n          case 26:\n            if (!(isBytes(value) || typeof value === 'string' || value instanceof String)) {\n              _context.next = 28;\n              break;\n            }\n\n            return _context.abrupt(\"return\", itToBlob(peekable));\n\n          case 28:\n            throw errCode(new Error(\"Unexpected input: \".concat(input)), 'ERR_UNEXPECTED_INPUT');\n\n          case 29:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _normaliseContent.apply(this, arguments);\n}\n\nfunction itToBlob(_x2) {\n  return _itToBlob.apply(this, arguments);\n}\n\nfunction _itToBlob() {\n  _itToBlob = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(stream) {\n    var parts, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, chunk;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            parts = [];\n            _iteratorAbruptCompletion = false;\n            _didIteratorError = false;\n            _context2.prev = 3;\n            _iterator = _asyncIterator(stream);\n\n          case 5:\n            _context2.next = 7;\n            return _iterator.next();\n\n          case 7:\n            if (!(_iteratorAbruptCompletion = !(_step = _context2.sent).done)) {\n              _context2.next = 13;\n              break;\n            }\n\n            chunk = _step.value;\n            parts.push(chunk);\n\n          case 10:\n            _iteratorAbruptCompletion = false;\n            _context2.next = 5;\n            break;\n\n          case 13:\n            _context2.next = 19;\n            break;\n\n          case 15:\n            _context2.prev = 15;\n            _context2.t0 = _context2[\"catch\"](3);\n            _didIteratorError = true;\n            _iteratorError = _context2.t0;\n\n          case 19:\n            _context2.prev = 19;\n            _context2.prev = 20;\n\n            if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n              _context2.next = 24;\n              break;\n            }\n\n            _context2.next = 24;\n            return _iterator.return();\n\n          case 24:\n            _context2.prev = 24;\n\n            if (!_didIteratorError) {\n              _context2.next = 27;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 27:\n            return _context2.finish(24);\n\n          case 28:\n            return _context2.finish(19);\n\n          case 29:\n            return _context2.abrupt(\"return\", new Blob(parts));\n\n          case 30:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[3, 15, 19, 29], [20,, 24, 28]]);\n  }));\n  return _itToBlob.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/ipfs-core-utils/esm/src/files/normalise-content.browser.js"],"names":["errCode","itPeekable","browserStreamToIt","all","isBytes","isBlob","isReadableStream","normaliseContent","input","Blob","String","toString","Symbol","iterator","asyncIterator","peekable","peek","value","done","itToBlob","push","Number","isInteger","Uint8Array","from","Error","stream","parts","chunk"],"mappings":";;;AAAA,OAAOA,OAAP,MAAoB,UAApB;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAOC,iBAAP,MAA8B,8BAA9B;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,SACEC,OADF,EAEEC,MAFF,EAGEC,gBAHF,QAIO,YAJP;AAKA,gBAAsBC,gBAAtB;AAAA;AAAA;;;+EAAO,iBAAgCC,KAAhC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,iBACDJ,OAAO,CAACI,KAAD,CADN;AAAA;AAAA;AAAA;;AAAA,6CAEI,IAAIC,IAAJ,CAAS,CAACD,KAAD,CAAT,CAFJ;;AAAA;AAAA,kBAID,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,YAAYE,MAJ7C;AAAA;AAAA;AAAA;;AAAA,6CAKI,IAAID,IAAJ,CAAS,CAACD,KAAK,CAACG,QAAN,EAAD,CAAT,CALJ;;AAAA;AAAA,iBAODN,MAAM,CAACG,KAAD,CAPL;AAAA;AAAA;AAAA;;AAAA,6CAQIA,KARJ;;AAAA;AAUL,gBAAIF,gBAAgB,CAACE,KAAD,CAApB,EAA6B;AAC3BA,cAAAA,KAAK,GAAGN,iBAAiB,CAACM,KAAD,CAAzB;AACD;;AAZI,kBAaDI,MAAM,CAACC,QAAP,IAAmBL,KAAnB,IAA4BI,MAAM,CAACE,aAAP,IAAwBN,KAbnD;AAAA;AAAA;AAAA;;AAcGO,YAAAA,QAdH,GAccd,UAAU,CAACO,KAAD,CAdxB;AAAA;AAAA,mBAeyBO,QAAQ,CAACC,IAAT,EAfzB;;AAAA;AAAA;AAeIC,YAAAA,KAfJ,wBAeIA,KAfJ;AAeWC,YAAAA,IAfX,wBAeWA,IAfX;;AAAA,iBAgBCA,IAhBD;AAAA;AAAA;AAAA;;AAAA,6CAiBMC,QAAQ,CAACJ,QAAD,CAjBd;;AAAA;AAmBHA,YAAAA,QAAQ,CAACK,IAAT,CAAcH,KAAd;;AAnBG,iBAoBCI,MAAM,CAACC,SAAP,CAAiBL,KAAjB,CApBD;AAAA;AAAA;AAAA;;AAAA,0BAqBUR,IArBV;AAAA,0BAqBgBc,UArBhB;AAAA;AAAA,mBAqBsCpB,GAAG,CAACY,QAAD,CArBzC;;AAAA;AAAA;AAAA,sCAqB2BS,IArB3B;AAAA;AAAA;;AAAA;AAAA,kBAuBCpB,OAAO,CAACa,KAAD,CAAP,IAAkB,OAAOA,KAAP,KAAiB,QAAnC,IAA+CA,KAAK,YAAYP,MAvBjE;AAAA;AAAA;AAAA;;AAAA,6CAwBMS,QAAQ,CAACJ,QAAD,CAxBd;;AAAA;AAAA,kBA2BCf,OAAO,CAAC,IAAIyB,KAAJ,6BAAgCjB,KAAhC,EAAD,EAA4C,sBAA5C,CA3BR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SA6BQW,Q;;;;;uEAAf,kBAAwBO,MAAxB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACQC,YAAAA,KADR,GACgB,EADhB;AAAA;AAAA;AAAA;AAAA,uCAE4BD,MAF5B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEmBE,YAAAA,KAFnB;AAGID,YAAAA,KAAK,CAACP,IAAN,CAAWQ,KAAX;;AAHJ;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,8CAKS,IAAInB,IAAJ,CAASkB,KAAT,CALT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import errCode from 'err-code';\nimport itPeekable from 'it-peekable';\nimport browserStreamToIt from 'browser-readablestream-to-it';\nimport all from 'it-all';\nimport {\n  isBytes,\n  isBlob,\n  isReadableStream\n} from './utils.js';\nexport async function normaliseContent(input) {\n  if (isBytes(input)) {\n    return new Blob([input]);\n  }\n  if (typeof input === 'string' || input instanceof String) {\n    return new Blob([input.toString()]);\n  }\n  if (isBlob(input)) {\n    return input;\n  }\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input);\n  }\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    const peekable = itPeekable(input);\n    const {value, done} = await peekable.peek();\n    if (done) {\n      return itToBlob(peekable);\n    }\n    peekable.push(value);\n    if (Number.isInteger(value)) {\n      return new Blob([Uint8Array.from(await all(peekable))]);\n    }\n    if (isBytes(value) || typeof value === 'string' || value instanceof String) {\n      return itToBlob(peekable);\n    }\n  }\n  throw errCode(new Error(`Unexpected input: ${ input }`), 'ERR_UNEXPECTED_INPUT');\n}\nasync function itToBlob(stream) {\n  const parts = [];\n  for await (const chunk of stream) {\n    parts.push(chunk);\n  }\n  return new Blob(parts);\n}"]},"metadata":{},"sourceType":"module"}