{"ast":null,"code":"import _objectSpread from \"/Users/jenniferhe/Documents/GitHub/oval/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/Users/jenniferhe/Documents/GitHub/oval/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/jenniferhe/Documents/GitHub/oval/node_modules/@babel/runtime/regenerator/index.js\";\nimport { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nexport var createGet = configure(function (api) {\n  function get(_x) {\n    return _get.apply(this, arguments);\n  }\n\n  function _get() {\n    _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(cid) {\n      var options,\n          res,\n          data,\n          _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              _context.next = 3;\n              return api.post('object/get', {\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: \"\".concat(cid instanceof Uint8Array ? CID.decode(cid) : cid),\n                  dataEncoding: 'base64'\n                }, options)),\n                headers: options.headers\n              });\n\n            case 3:\n              res = _context.sent;\n              _context.next = 6;\n              return res.json();\n\n            case 6:\n              data = _context.sent;\n              return _context.abrupt(\"return\", {\n                Data: uint8ArrayFromString(data.Data, 'base64pad'),\n                Links: (data.Links || []).map(function (link) {\n                  return {\n                    Name: link.Name,\n                    Hash: CID.parse(link.Hash),\n                    Tsize: link.Size\n                  };\n                })\n              });\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _get.apply(this, arguments);\n  }\n\n  return get;\n});","map":{"version":3,"sources":["/Users/jenniferhe/Documents/GitHub/oval/node_modules/ipfs-http-client/esm/src/object/get.js"],"names":["CID","configure","toUrlSearchParams","fromString","uint8ArrayFromString","createGet","api","get","cid","options","post","signal","searchParams","arg","Uint8Array","decode","dataEncoding","headers","res","json","data","Data","Links","map","link","Name","Hash","parse","Tsize","Size"],"mappings":";;;AAAA,SAASA,GAAT,QAAoB,kBAApB;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,SAASC,UAAU,IAAIC,oBAAvB,QAAmD,yBAAnD;AACA,OAAO,IAAMC,SAAS,GAAGJ,SAAS,CAAC,UAAAK,GAAG,EAAI;AAAA,WACzBC,GADyB;AAAA;AAAA;;AAAA;AAAA,oEACxC,iBAAmBC,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwBC,cAAAA,OAAxB,2DAAkC,EAAlC;AAAA;AAAA,qBACoBH,GAAG,CAACI,IAAJ,CAAS,YAAT,EAAuB;AACvCC,gBAAAA,MAAM,EAAEF,OAAO,CAACE,MADuB;AAEvCC,gBAAAA,YAAY,EAAEV,iBAAiB;AAC7BW,kBAAAA,GAAG,YAAML,GAAG,YAAYM,UAAf,GAA4Bd,GAAG,CAACe,MAAJ,CAAWP,GAAX,CAA5B,GAA8CA,GAApD,CAD0B;AAE7BQ,kBAAAA,YAAY,EAAE;AAFe,mBAG1BP,OAH0B,EAFQ;AAOvCQ,gBAAAA,OAAO,EAAER,OAAO,CAACQ;AAPsB,eAAvB,CADpB;;AAAA;AACQC,cAAAA,GADR;AAAA;AAAA,qBAUqBA,GAAG,CAACC,IAAJ,EAVrB;;AAAA;AAUQC,cAAAA,IAVR;AAAA,+CAWS;AACLC,gBAAAA,IAAI,EAAEjB,oBAAoB,CAACgB,IAAI,CAACC,IAAN,EAAY,WAAZ,CADrB;AAELC,gBAAAA,KAAK,EAAE,CAACF,IAAI,CAACE,KAAL,IAAc,EAAf,EAAmBC,GAAnB,CAAuB,UAAAC,IAAI;AAAA,yBAAK;AACrCC,oBAAAA,IAAI,EAAED,IAAI,CAACC,IAD0B;AAErCC,oBAAAA,IAAI,EAAE1B,GAAG,CAAC2B,KAAJ,CAAUH,IAAI,CAACE,IAAf,CAF+B;AAGrCE,oBAAAA,KAAK,EAAEJ,IAAI,CAACK;AAHyB,mBAAL;AAAA,iBAA3B;AAFF,eAXT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADwC;AAAA;AAAA;;AAqBxC,SAAOtB,GAAP;AACD,CAtBiC,CAA3B","sourcesContent":["import { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nexport const createGet = configure(api => {\n  async function get(cid, options = {}) {\n    const res = await api.post('object/get', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${ cid instanceof Uint8Array ? CID.decode(cid) : cid }`,\n        dataEncoding: 'base64',\n        ...options\n      }),\n      headers: options.headers\n    });\n    const data = await res.json();\n    return {\n      Data: uint8ArrayFromString(data.Data, 'base64pad'),\n      Links: (data.Links || []).map(link => ({\n        Name: link.Name,\n        Hash: CID.parse(link.Hash),\n        Tsize: link.Size\n      }))\n    };\n  }\n  return get;\n});"]},"metadata":{},"sourceType":"module"}