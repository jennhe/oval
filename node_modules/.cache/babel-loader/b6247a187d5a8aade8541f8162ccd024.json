{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/jenniferhe/Documents/GitHub/oval/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { CID } from 'multiformats/cid';\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js';\nexport var decodePin = function decodePin(_ref) {\n  var name = _ref.Name,\n      status = _ref.Status,\n      cid = _ref.Cid;\n  return {\n    cid: CID.parse(cid),\n    name: name,\n    status: status\n  };\n};\nexport var encodeService = function encodeService(service) {\n  if (typeof service === 'string' && service !== '') {\n    return service;\n  } else {\n    throw new TypeError('service name must be passed');\n  }\n};\nexport var encodeCID = function encodeCID(cid) {\n  if (CID.asCID(cid)) {\n    return cid.toString();\n  } else {\n    throw new TypeError(\"CID instance expected instead of \".concat(typeof cid));\n  }\n};\nexport var encodeQuery = function encodeQuery(_ref2) {\n  var service = _ref2.service,\n      cid = _ref2.cid,\n      name = _ref2.name,\n      status = _ref2.status,\n      all = _ref2.all;\n  var query = toUrlSearchParams({\n    service: encodeService(service),\n    name: name,\n    force: all ? true : undefined\n  });\n\n  if (cid) {\n    var _iterator = _createForOfIteratorHelper(cid),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var value = _step.value;\n        query.append('cid', encodeCID(value));\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  if (status) {\n    var _iterator2 = _createForOfIteratorHelper(status),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var _value = _step2.value;\n        query.append('status', _value);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n\n  return query;\n};\nexport var encodeAddParams = function encodeAddParams(_ref3) {\n  var cid = _ref3.cid,\n      service = _ref3.service,\n      background = _ref3.background,\n      name = _ref3.name,\n      origins = _ref3.origins;\n  var params = toUrlSearchParams({\n    arg: encodeCID(cid),\n    service: encodeService(service),\n    name: name,\n    background: background ? true : undefined\n  });\n\n  if (origins) {\n    var _iterator3 = _createForOfIteratorHelper(origins),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var origin = _step3.value;\n        params.append('origin', origin.toString());\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n  }\n\n  return params;\n};","map":{"version":3,"sources":["/Users/jenniferhe/Documents/GitHub/oval/node_modules/ipfs-http-client/esm/src/pin/remote/utils.js"],"names":["CID","toUrlSearchParams","decodePin","name","Name","status","Status","cid","Cid","parse","encodeService","service","TypeError","encodeCID","asCID","toString","encodeQuery","all","query","force","undefined","value","append","encodeAddParams","background","origins","params","arg","origin"],"mappings":"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","sourcesContent":["import { CID } from 'multiformats/cid';\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js';\nexport const decodePin = ({\n  Name: name,\n  Status: status,\n  Cid: cid\n}) => {\n  return {\n    cid: CID.parse(cid),\n    name,\n    status\n  };\n};\nexport const encodeService = service => {\n  if (typeof service === 'string' && service !== '') {\n    return service;\n  } else {\n    throw new TypeError('service name must be passed');\n  }\n};\nexport const encodeCID = cid => {\n  if (CID.asCID(cid)) {\n    return cid.toString();\n  } else {\n    throw new TypeError(`CID instance expected instead of ${ typeof cid }`);\n  }\n};\nexport const encodeQuery = ({service, cid, name, status, all}) => {\n  const query = toUrlSearchParams({\n    service: encodeService(service),\n    name,\n    force: all ? true : undefined\n  });\n  if (cid) {\n    for (const value of cid) {\n      query.append('cid', encodeCID(value));\n    }\n  }\n  if (status) {\n    for (const value of status) {\n      query.append('status', value);\n    }\n  }\n  return query;\n};\nexport const encodeAddParams = ({cid, service, background, name, origins}) => {\n  const params = toUrlSearchParams({\n    arg: encodeCID(cid),\n    service: encodeService(service),\n    name,\n    background: background ? true : undefined\n  });\n  if (origins) {\n    for (const origin of origins) {\n      params.append('origin', origin.toString());\n    }\n  }\n  return params;\n};"]},"metadata":{},"sourceType":"module"}