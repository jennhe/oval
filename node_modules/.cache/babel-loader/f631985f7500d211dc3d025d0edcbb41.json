{"ast":null,"code":"import _objectSpread from \"/Users/jenniferhe/Documents/GitHub/oval/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/Users/jenniferhe/Documents/GitHub/oval/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/jenniferhe/Documents/GitHub/oval/node_modules/@babel/runtime/regenerator/index.js\";\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { Multiaddr } from 'multiaddr';\nexport var createClear = configure(function (api) {\n  function clear() {\n    return _clear.apply(this, arguments);\n  }\n\n  function _clear() {\n    _clear = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var options,\n          res,\n          _yield$res$json,\n          Peers,\n          _args = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n              _context.next = 3;\n              return api.post('bootstrap/rm', {\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread(_objectSpread({}, options), {}, {\n                  all: true\n                })),\n                headers: options.headers\n              });\n\n            case 3:\n              res = _context.sent;\n              _context.next = 6;\n              return res.json();\n\n            case 6:\n              _yield$res$json = _context.sent;\n              Peers = _yield$res$json.Peers;\n              return _context.abrupt(\"return\", {\n                Peers: Peers.map(function (ma) {\n                  return new Multiaddr(ma);\n                })\n              });\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _clear.apply(this, arguments);\n  }\n\n  return clear;\n});","map":{"version":3,"sources":["/Users/jenniferhe/Documents/GitHub/oval/node_modules/ipfs-http-client/esm/src/bootstrap/clear.js"],"names":["configure","toUrlSearchParams","Multiaddr","createClear","api","clear","options","post","signal","searchParams","all","headers","res","json","Peers","map","ma"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,qBAA1B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,SAASC,SAAT,QAA0B,WAA1B;AACA,OAAO,IAAMC,WAAW,GAAGH,SAAS,CAAC,UAAAI,GAAG,EAAI;AAAA,WAC3BC,KAD2B;AAAA;AAAA;;AAAA;AAAA,sEAC1C;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAqBC,cAAAA,OAArB,2DAA+B,EAA/B;AAAA;AAAA,qBACoBF,GAAG,CAACG,IAAJ,CAAS,cAAT,EAAyB;AACzCC,gBAAAA,MAAM,EAAEF,OAAO,CAACE,MADyB;AAEzCC,gBAAAA,YAAY,EAAER,iBAAiB,iCAC1BK,OAD0B;AAE7BI,kBAAAA,GAAG,EAAE;AAFwB,mBAFU;AAMzCC,gBAAAA,OAAO,EAAEL,OAAO,CAACK;AANwB,eAAzB,CADpB;;AAAA;AACQC,cAAAA,GADR;AAAA;AAAA,qBASwBA,GAAG,CAACC,IAAJ,EATxB;;AAAA;AAAA;AASSC,cAAAA,KATT,mBASSA,KATT;AAAA,+CAUS;AAAEA,gBAAAA,KAAK,EAAEA,KAAK,CAACC,GAAN,CAAU,UAAAC,EAAE;AAAA,yBAAI,IAAId,SAAJ,CAAcc,EAAd,CAAJ;AAAA,iBAAZ;AAAT,eAVT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAD0C;AAAA;AAAA;;AAa1C,SAAOX,KAAP;AACD,CAdmC,CAA7B","sourcesContent":["import { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { Multiaddr } from 'multiaddr';\nexport const createClear = configure(api => {\n  async function clear(options = {}) {\n    const res = await api.post('bootstrap/rm', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        ...options,\n        all: true\n      }),\n      headers: options.headers\n    });\n    const {Peers} = await res.json();\n    return { Peers: Peers.map(ma => new Multiaddr(ma)) };\n  }\n  return clear;\n});"]},"metadata":{},"sourceType":"module"}