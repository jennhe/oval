{"ast":null,"code":"import _objectSpread from \"/Users/jenniferhe/Documents/GitHub/oval/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/Users/jenniferhe/Documents/GitHub/oval/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/jenniferhe/Documents/GitHub/oval/node_modules/@babel/runtime/regenerator/index.js\";\nimport { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport var createWantlistForPeer = configure(function (api) {\n  function wantlistForPeer(_x) {\n    return _wantlistForPeer.apply(this, arguments);\n  }\n\n  function _wantlistForPeer() {\n    _wantlistForPeer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(peerId) {\n      var options,\n          res,\n          _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              _context.next = 3;\n              return api.post('bitswap/wantlist', {\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread(_objectSpread({}, options), {}, {\n                  peer: peerId.toString()\n                })),\n                headers: options.headers\n              });\n\n            case 3:\n              _context.next = 5;\n              return _context.sent.json();\n\n            case 5:\n              res = _context.sent;\n              return _context.abrupt(\"return\", (res.Keys || []).map(function (k) {\n                return CID.parse(k['/']);\n              }));\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _wantlistForPeer.apply(this, arguments);\n  }\n\n  return wantlistForPeer;\n});","map":{"version":3,"sources":["/Users/jenniferhe/Documents/GitHub/oval/node_modules/ipfs-http-client/esm/src/bitswap/wantlist-for-peer.js"],"names":["CID","configure","toUrlSearchParams","createWantlistForPeer","api","wantlistForPeer","peerId","options","post","signal","searchParams","peer","toString","headers","json","res","Keys","map","k","parse"],"mappings":";;;AAAA,SAASA,GAAT,QAAoB,kBAApB;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,OAAO,IAAMC,qBAAqB,GAAGF,SAAS,CAAC,UAAAG,GAAG,EAAI;AAAA,WACrCC,eADqC;AAAA;AAAA;;AAAA;AAAA,gFACpD,iBAA+BC,MAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuCC,cAAAA,OAAvC,2DAAiD,EAAjD;AAAA;AAAA,qBAC2BH,GAAG,CAACI,IAAJ,CAAS,kBAAT,EAA6B;AACpDC,gBAAAA,MAAM,EAAEF,OAAO,CAACE,MADoC;AAEpDC,gBAAAA,YAAY,EAAER,iBAAiB,iCAC1BK,OAD0B;AAE7BI,kBAAAA,IAAI,EAAEL,MAAM,CAACM,QAAP;AAFuB,mBAFqB;AAMpDC,gBAAAA,OAAO,EAAEN,OAAO,CAACM;AANmC,eAA7B,CAD3B;;AAAA;AAAA;AAAA,mCAQMC,IARN;;AAAA;AACQC,cAAAA,GADR;AAAA,+CASS,CAACA,GAAG,CAACC,IAAJ,IAAY,EAAb,EAAiBC,GAAjB,CAAqB,UAAAC,CAAC;AAAA,uBAAIlB,GAAG,CAACmB,KAAJ,CAAUD,CAAC,CAAC,GAAD,CAAX,CAAJ;AAAA,eAAtB,CATT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADoD;AAAA;AAAA;;AAYpD,SAAOb,eAAP;AACD,CAb6C,CAAvC","sourcesContent":["import { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport const createWantlistForPeer = configure(api => {\n  async function wantlistForPeer(peerId, options = {}) {\n    const res = await (await api.post('bitswap/wantlist', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        ...options,\n        peer: peerId.toString()\n      }),\n      headers: options.headers\n    })).json();\n    return (res.Keys || []).map(k => CID.parse(k['/']));\n  }\n  return wantlistForPeer;\n});"]},"metadata":{},"sourceType":"module"}