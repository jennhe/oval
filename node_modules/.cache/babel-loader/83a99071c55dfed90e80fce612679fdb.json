{"ast":null,"code":"import _objectSpread from \"/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/@babel/runtime/regenerator/index.js\";\nimport { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport var createFlush = configure(function (api) {\n  function flush(_x) {\n    return _flush.apply(this, arguments);\n  }\n\n  function _flush() {\n    _flush = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(path) {\n      var options,\n          res,\n          data,\n          _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n\n              if (!(!path || typeof path !== 'string')) {\n                _context.next = 3;\n                break;\n              }\n\n              throw new Error('ipfs.files.flush requires a path');\n\n            case 3:\n              _context.next = 5;\n              return api.post('files/flush', {\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: path\n                }, options)),\n                headers: options.headers\n              });\n\n            case 5:\n              res = _context.sent;\n              _context.next = 8;\n              return res.json();\n\n            case 8:\n              data = _context.sent;\n              return _context.abrupt(\"return\", CID.parse(data.Cid));\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _flush.apply(this, arguments);\n  }\n\n  return flush;\n});","map":{"version":3,"sources":["/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/ipfs-http-client/esm/src/files/flush.js"],"names":["CID","configure","toUrlSearchParams","createFlush","api","flush","path","options","Error","post","signal","searchParams","arg","headers","res","json","data","parse","Cid"],"mappings":";;;AAAA,SAASA,GAAT,QAAoB,kBAApB;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,OAAO,IAAMC,WAAW,GAAGF,SAAS,CAAC,UAAAG,GAAG,EAAI;AAAA,WAC3BC,KAD2B;AAAA;AAAA;;AAAA;AAAA,sEAC1C,iBAAqBC,IAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2BC,cAAAA,OAA3B,2DAAqC,EAArC;;AAAA,oBACM,CAACD,IAAD,IAAS,OAAOA,IAAP,KAAgB,QAD/B;AAAA;AAAA;AAAA;;AAAA,oBAEU,IAAIE,KAAJ,CAAU,kCAAV,CAFV;;AAAA;AAAA;AAAA,qBAIoBJ,GAAG,CAACK,IAAJ,CAAS,aAAT,EAAwB;AACxCC,gBAAAA,MAAM,EAAEH,OAAO,CAACG,MADwB;AAExCC,gBAAAA,YAAY,EAAET,iBAAiB;AAC7BU,kBAAAA,GAAG,EAAEN;AADwB,mBAE1BC,OAF0B,EAFS;AAMxCM,gBAAAA,OAAO,EAAEN,OAAO,CAACM;AANuB,eAAxB,CAJpB;;AAAA;AAIQC,cAAAA,GAJR;AAAA;AAAA,qBAYqBA,GAAG,CAACC,IAAJ,EAZrB;;AAAA;AAYQC,cAAAA,IAZR;AAAA,+CAaShB,GAAG,CAACiB,KAAJ,CAAUD,IAAI,CAACE,GAAf,CAbT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAD0C;AAAA;AAAA;;AAgB1C,SAAOb,KAAP;AACD,CAjBmC,CAA7B","sourcesContent":["import { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport const createFlush = configure(api => {\n  async function flush(path, options = {}) {\n    if (!path || typeof path !== 'string') {\n      throw new Error('ipfs.files.flush requires a path');\n    }\n    const res = await api.post('files/flush', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    });\n    const data = await res.json();\n    return CID.parse(data.Cid);\n  }\n  return flush;\n});"]},"metadata":{},"sourceType":"module"}