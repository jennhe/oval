{"ast":null,"code":"import _defineProperty from \"/Users/jenniferhe/Documents/GitHub/oval/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"/Users/jenniferhe/Documents/GitHub/oval/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/jenniferhe/Documents/GitHub/oval/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/jenniferhe/Documents/GitHub/oval/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport basex from '../../vendor/base-x.js';\nimport { coerce } from '../bytes.js';\n\nvar Encoder = /*#__PURE__*/function () {\n  function Encoder(name, prefix, baseEncode) {\n    _classCallCheck(this, Encoder);\n\n    this.name = name;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n  }\n\n  _createClass(Encoder, [{\n    key: \"encode\",\n    value: function encode(bytes) {\n      if (bytes instanceof Uint8Array) {\n        return \"\".concat(this.prefix).concat(this.baseEncode(bytes));\n      } else {\n        throw Error('Unknown type, must be binary type');\n      }\n    }\n  }]);\n\n  return Encoder;\n}();\n\nvar Decoder = /*#__PURE__*/function () {\n  function Decoder(name, prefix, baseDecode) {\n    _classCallCheck(this, Decoder);\n\n    this.name = name;\n    this.prefix = prefix;\n    this.baseDecode = baseDecode;\n  }\n\n  _createClass(Decoder, [{\n    key: \"decode\",\n    value: function decode(text) {\n      if (typeof text === 'string') {\n        switch (text[0]) {\n          case this.prefix:\n            {\n              return this.baseDecode(text.slice(1));\n            }\n\n          default:\n            {\n              throw Error(\"Unable to decode multibase string \".concat(JSON.stringify(text), \", \").concat(this.name, \" decoder only supports inputs prefixed with \").concat(this.prefix));\n            }\n        }\n      } else {\n        throw Error('Can only multibase decode strings');\n      }\n    }\n  }, {\n    key: \"or\",\n    value: function or(decoder) {\n      return _or(this, decoder);\n    }\n  }]);\n\n  return Decoder;\n}();\n\nvar ComposedDecoder = /*#__PURE__*/function () {\n  function ComposedDecoder(decoders) {\n    _classCallCheck(this, ComposedDecoder);\n\n    this.decoders = decoders;\n  }\n\n  _createClass(ComposedDecoder, [{\n    key: \"or\",\n    value: function or(decoder) {\n      return _or(this, decoder);\n    }\n  }, {\n    key: \"decode\",\n    value: function decode(input) {\n      var prefix = input[0];\n      var decoder = this.decoders[prefix];\n\n      if (decoder) {\n        return decoder.decode(input);\n      } else {\n        throw RangeError(\"Unable to decode multibase string \".concat(JSON.stringify(input), \", only inputs prefixed with \").concat(Object.keys(this.decoders), \" are supported\"));\n      }\n    }\n  }]);\n\n  return ComposedDecoder;\n}();\n\nvar _or = function _or(left, right) {\n  return new ComposedDecoder(_objectSpread(_objectSpread({}, left.decoders || _defineProperty({}, left.prefix, left)), right.decoders || _defineProperty({}, right.prefix, right)));\n};\n\nexport { _or as or };\nexport var Codec = /*#__PURE__*/function () {\n  function Codec(name, prefix, baseEncode, baseDecode) {\n    _classCallCheck(this, Codec);\n\n    this.name = name;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n    this.baseDecode = baseDecode;\n    this.encoder = new Encoder(name, prefix, baseEncode);\n    this.decoder = new Decoder(name, prefix, baseDecode);\n  }\n\n  _createClass(Codec, [{\n    key: \"encode\",\n    value: function encode(input) {\n      return this.encoder.encode(input);\n    }\n  }, {\n    key: \"decode\",\n    value: function decode(input) {\n      return this.decoder.decode(input);\n    }\n  }]);\n\n  return Codec;\n}();\nexport var from = function from(_ref3) {\n  var name = _ref3.name,\n      prefix = _ref3.prefix,\n      encode = _ref3.encode,\n      decode = _ref3.decode;\n  return new Codec(name, prefix, encode, decode);\n};\nexport var baseX = function baseX(_ref4) {\n  var prefix = _ref4.prefix,\n      name = _ref4.name,\n      alphabet = _ref4.alphabet;\n\n  var _basex = basex(alphabet, name),\n      encode = _basex.encode,\n      _decode = _basex.decode;\n\n  return from({\n    prefix: prefix,\n    name: name,\n    encode: encode,\n    decode: function decode(text) {\n      return coerce(_decode(text));\n    }\n  });\n};\n\nvar _decode2 = function decode(string, alphabet, bitsPerChar, name) {\n  var codes = {};\n\n  for (var i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i;\n  }\n\n  var end = string.length;\n\n  while (string[end - 1] === '=') {\n    --end;\n  }\n\n  var out = new Uint8Array(end * bitsPerChar / 8 | 0);\n  var bits = 0;\n  var buffer = 0;\n  var written = 0;\n\n  for (var _i = 0; _i < end; ++_i) {\n    var value = codes[string[_i]];\n\n    if (value === undefined) {\n      throw new SyntaxError(\"Non-\".concat(name, \" character\"));\n    }\n\n    buffer = buffer << bitsPerChar | value;\n    bits += bitsPerChar;\n\n    if (bits >= 8) {\n      bits -= 8;\n      out[written++] = 255 & buffer >> bits;\n    }\n  }\n\n  if (bits >= bitsPerChar || 255 & buffer << 8 - bits) {\n    throw new SyntaxError('Unexpected end of data');\n  }\n\n  return out;\n};\n\nvar _encode = function encode(data, alphabet, bitsPerChar) {\n  var pad = alphabet[alphabet.length - 1] === '=';\n  var mask = (1 << bitsPerChar) - 1;\n  var out = '';\n  var bits = 0;\n  var buffer = 0;\n\n  for (var i = 0; i < data.length; ++i) {\n    buffer = buffer << 8 | data[i];\n    bits += 8;\n\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar;\n      out += alphabet[mask & buffer >> bits];\n    }\n  }\n\n  if (bits) {\n    out += alphabet[mask & buffer << bitsPerChar - bits];\n  }\n\n  if (pad) {\n    while (out.length * bitsPerChar & 7) {\n      out += '=';\n    }\n  }\n\n  return out;\n};\n\nexport var rfc4648 = function rfc4648(_ref5) {\n  var name = _ref5.name,\n      prefix = _ref5.prefix,\n      bitsPerChar = _ref5.bitsPerChar,\n      alphabet = _ref5.alphabet;\n  return from({\n    prefix: prefix,\n    name: name,\n    encode: function encode(input) {\n      return _encode(input, alphabet, bitsPerChar);\n    },\n    decode: function decode(input) {\n      return _decode2(input, alphabet, bitsPerChar, name);\n    }\n  });\n};","map":{"version":3,"sources":["/Users/jenniferhe/Documents/GitHub/oval/node_modules/multiformats/esm/src/bases/base.js"],"names":["basex","coerce","Encoder","name","prefix","baseEncode","bytes","Uint8Array","Error","Decoder","baseDecode","text","slice","JSON","stringify","decoder","or","ComposedDecoder","decoders","input","decode","RangeError","Object","keys","left","right","Codec","encoder","encode","from","baseX","alphabet","string","bitsPerChar","codes","i","length","end","out","bits","buffer","written","value","undefined","SyntaxError","data","pad","mask","rfc4648"],"mappings":"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","sourcesContent":["import basex from '../../vendor/base-x.js';\nimport { coerce } from '../bytes.js';\nclass Encoder {\n  constructor(name, prefix, baseEncode) {\n    this.name = name;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n  }\n  encode(bytes) {\n    if (bytes instanceof Uint8Array) {\n      return `${ this.prefix }${ this.baseEncode(bytes) }`;\n    } else {\n      throw Error('Unknown type, must be binary type');\n    }\n  }\n}\nclass Decoder {\n  constructor(name, prefix, baseDecode) {\n    this.name = name;\n    this.prefix = prefix;\n    this.baseDecode = baseDecode;\n  }\n  decode(text) {\n    if (typeof text === 'string') {\n      switch (text[0]) {\n      case this.prefix: {\n          return this.baseDecode(text.slice(1));\n        }\n      default: {\n          throw Error(`Unable to decode multibase string ${ JSON.stringify(text) }, ${ this.name } decoder only supports inputs prefixed with ${ this.prefix }`);\n        }\n      }\n    } else {\n      throw Error('Can only multibase decode strings');\n    }\n  }\n  or(decoder) {\n    return or(this, decoder);\n  }\n}\nclass ComposedDecoder {\n  constructor(decoders) {\n    this.decoders = decoders;\n  }\n  or(decoder) {\n    return or(this, decoder);\n  }\n  decode(input) {\n    const prefix = input[0];\n    const decoder = this.decoders[prefix];\n    if (decoder) {\n      return decoder.decode(input);\n    } else {\n      throw RangeError(`Unable to decode multibase string ${ JSON.stringify(input) }, only inputs prefixed with ${ Object.keys(this.decoders) } are supported`);\n    }\n  }\n}\nexport const or = (left, right) => new ComposedDecoder({\n  ...left.decoders || { [left.prefix]: left },\n  ...right.decoders || { [right.prefix]: right }\n});\nexport class Codec {\n  constructor(name, prefix, baseEncode, baseDecode) {\n    this.name = name;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n    this.baseDecode = baseDecode;\n    this.encoder = new Encoder(name, prefix, baseEncode);\n    this.decoder = new Decoder(name, prefix, baseDecode);\n  }\n  encode(input) {\n    return this.encoder.encode(input);\n  }\n  decode(input) {\n    return this.decoder.decode(input);\n  }\n}\nexport const from = ({name, prefix, encode, decode}) => new Codec(name, prefix, encode, decode);\nexport const baseX = ({prefix, name, alphabet}) => {\n  const {encode, decode} = basex(alphabet, name);\n  return from({\n    prefix,\n    name,\n    encode,\n    decode: text => coerce(decode(text))\n  });\n};\nconst decode = (string, alphabet, bitsPerChar, name) => {\n  const codes = {};\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i;\n  }\n  let end = string.length;\n  while (string[end - 1] === '=') {\n    --end;\n  }\n  const out = new Uint8Array(end * bitsPerChar / 8 | 0);\n  let bits = 0;\n  let buffer = 0;\n  let written = 0;\n  for (let i = 0; i < end; ++i) {\n    const value = codes[string[i]];\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${ name } character`);\n    }\n    buffer = buffer << bitsPerChar | value;\n    bits += bitsPerChar;\n    if (bits >= 8) {\n      bits -= 8;\n      out[written++] = 255 & buffer >> bits;\n    }\n  }\n  if (bits >= bitsPerChar || 255 & buffer << 8 - bits) {\n    throw new SyntaxError('Unexpected end of data');\n  }\n  return out;\n};\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '=';\n  const mask = (1 << bitsPerChar) - 1;\n  let out = '';\n  let bits = 0;\n  let buffer = 0;\n  for (let i = 0; i < data.length; ++i) {\n    buffer = buffer << 8 | data[i];\n    bits += 8;\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar;\n      out += alphabet[mask & buffer >> bits];\n    }\n  }\n  if (bits) {\n    out += alphabet[mask & buffer << bitsPerChar - bits];\n  }\n  if (pad) {\n    while (out.length * bitsPerChar & 7) {\n      out += '=';\n    }\n  }\n  return out;\n};\nexport const rfc4648 = ({name, prefix, bitsPerChar, alphabet}) => {\n  return from({\n    prefix,\n    name,\n    encode(input) {\n      return encode(input, alphabet, bitsPerChar);\n    },\n    decode(input) {\n      return decode(input, alphabet, bitsPerChar, name);\n    }\n  });\n};"]},"metadata":{},"sourceType":"module"}