{"ast":null,"code":"import _asyncToGenerator from \"/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _awaitAsyncGenerator from \"/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _wrapAsyncGenerator from \"/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _regeneratorRuntime from \"/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/@babel/runtime/regenerator/index.js\";\nimport errCode from 'err-code';\nimport browserStreamToIt from 'browser-readablestream-to-it';\nimport itPeekable from 'it-peekable';\nimport { isBytes, isBlob, isReadableStream, isFileObject } from './utils.js';\nimport { parseMtime, parseMode } from 'ipfs-unixfs';\nexport function normaliseCandidateSingle(_x, _x2) {\n  return _normaliseCandidateSingle.apply(this, arguments);\n}\n\nfunction _normaliseCandidateSingle() {\n  _normaliseCandidateSingle = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(input, normaliseContent) {\n    var peekable, _yield$_awaitAsyncGen, value, done;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(input === null || input === undefined)) {\n              _context.next = 2;\n              break;\n            }\n\n            throw errCode(new Error(\"Unexpected input: \".concat(input)), 'ERR_UNEXPECTED_INPUT');\n\n          case 2:\n            if (!(typeof input === 'string' || input instanceof String)) {\n              _context.next = 6;\n              break;\n            }\n\n            _context.next = 5;\n            return toFileObject(input.toString(), normaliseContent);\n\n          case 5:\n            return _context.abrupt(\"return\");\n\n          case 6:\n            if (!(isBytes(input) || isBlob(input))) {\n              _context.next = 10;\n              break;\n            }\n\n            _context.next = 9;\n            return toFileObject(input, normaliseContent);\n\n          case 9:\n            return _context.abrupt(\"return\");\n\n          case 10:\n            if (isReadableStream(input)) {\n              input = browserStreamToIt(input);\n            }\n\n            if (!(Symbol.iterator in input || Symbol.asyncIterator in input)) {\n              _context.next = 28;\n              break;\n            }\n\n            peekable = itPeekable(input);\n            _context.next = 15;\n            return _awaitAsyncGenerator(peekable.peek());\n\n          case 15:\n            _yield$_awaitAsyncGen = _context.sent;\n            value = _yield$_awaitAsyncGen.value;\n            done = _yield$_awaitAsyncGen.done;\n\n            if (!done) {\n              _context.next = 22;\n              break;\n            }\n\n            _context.next = 21;\n            return {\n              content: []\n            };\n\n          case 21:\n            return _context.abrupt(\"return\");\n\n          case 22:\n            peekable.push(value);\n\n            if (!(Number.isInteger(value) || isBytes(value) || typeof value === 'string' || value instanceof String)) {\n              _context.next = 27;\n              break;\n            }\n\n            _context.next = 26;\n            return toFileObject(peekable, normaliseContent);\n\n          case 26:\n            return _context.abrupt(\"return\");\n\n          case 27:\n            throw errCode(new Error('Unexpected input: multiple items passed - if you are using ipfs.add, please use ipfs.addAll instead'), 'ERR_UNEXPECTED_INPUT');\n\n          case 28:\n            if (!isFileObject(input)) {\n              _context.next = 32;\n              break;\n            }\n\n            _context.next = 31;\n            return toFileObject(input, normaliseContent);\n\n          case 31:\n            return _context.abrupt(\"return\");\n\n          case 32:\n            throw errCode(new Error('Unexpected input: cannot convert \"' + typeof input + '\" into ImportCandidate'), 'ERR_UNEXPECTED_INPUT');\n\n          case 33:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _normaliseCandidateSingle.apply(this, arguments);\n}\n\nfunction toFileObject(_x3, _x4) {\n  return _toFileObject.apply(this, arguments);\n}\n\nfunction _toFileObject() {\n  _toFileObject = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(input, normaliseContent) {\n    var path, mode, mtime, content, file;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            path = input.path, mode = input.mode, mtime = input.mtime, content = input.content;\n            file = {\n              path: path || '',\n              mode: parseMode(mode),\n              mtime: parseMtime(mtime)\n            };\n\n            if (!content) {\n              _context2.next = 8;\n              break;\n            }\n\n            _context2.next = 5;\n            return normaliseContent(content);\n\n          case 5:\n            file.content = _context2.sent;\n            _context2.next = 12;\n            break;\n\n          case 8:\n            if (path) {\n              _context2.next = 12;\n              break;\n            }\n\n            _context2.next = 11;\n            return normaliseContent(input);\n\n          case 11:\n            file.content = _context2.sent;\n\n          case 12:\n            return _context2.abrupt(\"return\", file);\n\n          case 13:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _toFileObject.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/ipfs-core-utils/esm/src/files/normalise-candidate-single.js"],"names":["errCode","browserStreamToIt","itPeekable","isBytes","isBlob","isReadableStream","isFileObject","parseMtime","parseMode","normaliseCandidateSingle","input","normaliseContent","undefined","Error","String","toFileObject","toString","Symbol","iterator","asyncIterator","peekable","peek","value","done","content","push","Number","isInteger","path","mode","mtime","file"],"mappings":"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","sourcesContent":["import errCode from 'err-code';\nimport browserStreamToIt from 'browser-readablestream-to-it';\nimport itPeekable from 'it-peekable';\nimport {\n  isBytes,\n  isBlob,\n  isReadableStream,\n  isFileObject\n} from './utils.js';\nimport {\n  parseMtime,\n  parseMode\n} from 'ipfs-unixfs';\nexport async function* normaliseCandidateSingle(input, normaliseContent) {\n  if (input === null || input === undefined) {\n    throw errCode(new Error(`Unexpected input: ${ input }`), 'ERR_UNEXPECTED_INPUT');\n  }\n  if (typeof input === 'string' || input instanceof String) {\n    yield toFileObject(input.toString(), normaliseContent);\n    return;\n  }\n  if (isBytes(input) || isBlob(input)) {\n    yield toFileObject(input, normaliseContent);\n    return;\n  }\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input);\n  }\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    const peekable = itPeekable(input);\n    const {value, done} = await peekable.peek();\n    if (done) {\n      yield { content: [] };\n      return;\n    }\n    peekable.push(value);\n    if (Number.isInteger(value) || isBytes(value) || typeof value === 'string' || value instanceof String) {\n      yield toFileObject(peekable, normaliseContent);\n      return;\n    }\n    throw errCode(new Error('Unexpected input: multiple items passed - if you are using ipfs.add, please use ipfs.addAll instead'), 'ERR_UNEXPECTED_INPUT');\n  }\n  if (isFileObject(input)) {\n    yield toFileObject(input, normaliseContent);\n    return;\n  }\n  throw errCode(new Error('Unexpected input: cannot convert \"' + typeof input + '\" into ImportCandidate'), 'ERR_UNEXPECTED_INPUT');\n}\nasync function toFileObject(input, normaliseContent) {\n  const {path, mode, mtime, content} = input;\n  const file = {\n    path: path || '',\n    mode: parseMode(mode),\n    mtime: parseMtime(mtime)\n  };\n  if (content) {\n    file.content = await normaliseContent(content);\n  } else if (!path) {\n    file.content = await normaliseContent(input);\n  }\n  return file;\n}"]},"metadata":{},"sourceType":"module"}