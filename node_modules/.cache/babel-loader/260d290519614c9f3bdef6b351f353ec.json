{"ast":null,"code":"import _objectSpread from \"/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/@babel/runtime/regenerator/index.js\";\nimport { modeToString } from '../lib/mode-to-string.js';\nimport { parseMtime } from '../lib/parse-mtime.js';\nimport { configure } from '../lib/configure.js';\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { abortSignal } from '../lib/abort-signal.js';\nexport var createWrite = configure(function (api) {\n  function write(_x, _x2) {\n    return _write.apply(this, arguments);\n  }\n\n  function _write() {\n    _write = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(path, input) {\n      var options,\n          controller,\n          signal,\n          res,\n          _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n              controller = new AbortController();\n              signal = abortSignal(controller.signal, options.signal);\n              _context.t0 = api;\n              _context.t1 = _objectSpread;\n              _context.t2 = {\n                signal: signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: path,\n                  streamChannels: true,\n                  count: options.length\n                }, options))\n              };\n              _context.next = 8;\n              return multipartRequest([{\n                content: input,\n                path: 'arg',\n                mode: modeToString(options.mode),\n                mtime: parseMtime(options.mtime)\n              }], controller, options.headers);\n\n            case 8:\n              _context.t3 = _context.sent;\n              _context.t4 = (0, _context.t1)(_context.t2, _context.t3);\n              _context.next = 12;\n              return _context.t0.post.call(_context.t0, 'files/write', _context.t4);\n\n            case 12:\n              res = _context.sent;\n              _context.next = 15;\n              return res.text();\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _write.apply(this, arguments);\n  }\n\n  return write;\n});","map":{"version":3,"sources":["/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/ipfs-http-client/esm/src/files/write.js"],"names":["modeToString","parseMtime","configure","multipartRequest","toUrlSearchParams","abortSignal","createWrite","api","write","path","input","options","controller","AbortController","signal","searchParams","arg","streamChannels","count","length","content","mode","mtime","headers","post","res","text"],"mappings":";;;AAAA,SAASA,YAAT,QAA6B,0BAA7B;AACA,SAASC,UAAT,QAA2B,uBAA3B;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,gBAAT,QAAiC,mCAAjC;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,OAAO,IAAMC,WAAW,GAAGJ,SAAS,CAAC,UAAAK,GAAG,EAAI;AAAA,WAC3BC,KAD2B;AAAA;AAAA;;AAAA;AAAA,sEAC1C,iBAAqBC,IAArB,EAA2BC,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkCC,cAAAA,OAAlC,2DAA4C,EAA5C;AACQC,cAAAA,UADR,GACqB,IAAIC,eAAJ,EADrB;AAEQC,cAAAA,MAFR,GAEiBT,WAAW,CAACO,UAAU,CAACE,MAAZ,EAAoBH,OAAO,CAACG,MAA5B,CAF5B;AAAA,4BAGoBP,GAHpB;AAAA;AAAA;AAIIO,gBAAAA,MAAM,EAANA,MAJJ;AAKIC,gBAAAA,YAAY,EAAEX,iBAAiB;AAC7BY,kBAAAA,GAAG,EAAEP,IADwB;AAE7BQ,kBAAAA,cAAc,EAAE,IAFa;AAG7BC,kBAAAA,KAAK,EAAEP,OAAO,CAACQ;AAHc,mBAI1BR,OAJ0B;AALnC;AAAA;AAAA,qBAWaR,gBAAgB,CAAC,CAAC;AACvBiB,gBAAAA,OAAO,EAAEV,KADc;AAEvBD,gBAAAA,IAAI,EAAE,KAFiB;AAGvBY,gBAAAA,IAAI,EAAErB,YAAY,CAACW,OAAO,CAACU,IAAT,CAHK;AAIvBC,gBAAAA,KAAK,EAAErB,UAAU,CAACU,OAAO,CAACW,KAAT;AAJM,eAAD,CAAD,EAKnBV,UALmB,EAKPD,OAAO,CAACY,OALD,CAX7B;;AAAA;AAAA;AAAA;AAAA;AAAA,iCAGwBC,IAHxB,mBAG6B,aAH7B;;AAAA;AAGQC,cAAAA,GAHR;AAAA;AAAA,qBAkBQA,GAAG,CAACC,IAAJ,EAlBR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAD0C;AAAA;AAAA;;AAqB1C,SAAOlB,KAAP;AACD,CAtBmC,CAA7B","sourcesContent":["import { modeToString } from '../lib/mode-to-string.js';\nimport { parseMtime } from '../lib/parse-mtime.js';\nimport { configure } from '../lib/configure.js';\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { abortSignal } from '../lib/abort-signal.js';\nexport const createWrite = configure(api => {\n  async function write(path, input, options = {}) {\n    const controller = new AbortController();\n    const signal = abortSignal(controller.signal, options.signal);\n    const res = await api.post('files/write', {\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        streamChannels: true,\n        count: options.length,\n        ...options\n      }),\n      ...await multipartRequest([{\n          content: input,\n          path: 'arg',\n          mode: modeToString(options.mode),\n          mtime: parseMtime(options.mtime)\n        }], controller, options.headers)\n    });\n    await res.text();\n  }\n  return write;\n});"]},"metadata":{},"sourceType":"module"}