{"ast":null,"code":"var _jsxFileName = \"/Users/jenniferhe/Documents/GitHub/oval/src/components/card/card.js\",\n    _s = $RefreshSig$();\n\nimport \"./card.css\";\nimport { PButton, SButton, TButton } from \"../button/button\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport Card from \"react-bootstrap/Card\";\nimport Form from \"react-bootstrap/Form\";\nimport { Container, InputGroup, FormControl } from \"react-bootstrap\";\nimport React, { useState } from \"react\";\nimport { create } from \"ipfs-http-client\";\nimport { ToastContainer, toast } from 'react-toastify';\nimport { FinnCard } from \"./mint_result\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst client = create(\"https://ipfs.infura.io:5001/api/v0\");\nglobal.Buffer = global.Buffer || require(\"buffer\").Buffer;\nexport function FormCard(props) {\n  _s();\n\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [quantity, setQuantity] = useState(0);\n  const [address, setAddress] = useState(\"\");\n  const [file, setFile] = useState(null); //file info for latest image\n\n  const [ipfs_url, setIPFS] = useState([]); //array of ipfs image urls\n\n  const [homeView, setHomeView] = useState(true);\n  const [image_path, setPath] = useState(\"./ipfs image.png\"); // const [ipfs_url, setIPFS] = useState(\"https://ipfs.infura.io:dummyURL\")\n\n  const [hash, setHash] = useState(\"dummy-hash\"); //will come from backend eventually\n\n  const retrieveFile = e => {\n    const data = e.target.files[0];\n    const reader = new window.FileReader();\n    reader.readAsArrayBuffer(data);\n\n    reader.onloadend = () => {\n      setFile(Buffer(reader.result));\n    };\n\n    e.preventDefault();\n  };\n\n  const handleSubmit = async e => {\n    // console.log(`about to submit nft form. props = ${props}, props.setHome = ${props.setHome}.`)\n    e.preventDefault();\n\n    try {\n      const created = await client.add(file);\n      const url = `https://ipfs.infura.io/ipfs/${created.path}`;\n      console.log(url);\n      setIPFS(url);\n      toast.success(\"NFT Minted!\");\n      setHomeView(false);\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"all-card\",\n    children: homeView ? /*#__PURE__*/_jsxDEV(Card, {\n      children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n        children: \"Mint your NFT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-contents\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"p3\",\n          htmlFor: \"title\",\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(InputGroup, {\n          className: \"form-contents\",\n          children: /*#__PURE__*/_jsxDEV(FormControl, {\n            id: \"title\",\n            \"aria-label\": \"Title\",\n            \"aria-describedby\": \"title\",\n            value: title,\n            onChange: e => setTitle(e.target.value),\n            type: \"text\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"p3\",\n          htmlFor: \"description\",\n          children: \"Description\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(InputGroup, {\n          className: \"form-contents\",\n          children: /*#__PURE__*/_jsxDEV(FormControl, {\n            id: \"description\",\n            \"aria-label\": \"Description\",\n            \"aria-describedby\": \"description\",\n            value: description,\n            onChange: e => setDescription(e.target.value),\n            as: \"textarea\",\n            rows: 3\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"p3\",\n          htmlFor: \"wallet-address\",\n          children: \"Wallet Address\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(InputGroup, {\n          className: \"form-contents\",\n          children: /*#__PURE__*/_jsxDEV(FormControl, {\n            id: \"address\",\n            \"aria-label\": \"Wallet Address\",\n            \"aria-describedby\": \"wallet-address\",\n            value: address,\n            onChange: e => setAddress(e.target.value),\n            type: \"text\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"p3\",\n          htmlFor: \"upload-nft\",\n          children: \"Upload NFT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(InputGroup, {\n          className: \"form-contents\",\n          children: /*#__PURE__*/_jsxDEV(FormControl, {\n            id: \"file\",\n            type: \"file\",\n            name: \"data\",\n            onChange: retrieveFile\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"Button\",\n          children: [/*#__PURE__*/_jsxDEV(PButton, {\n            type: \"submit\",\n            onClick: handleSubmit,\n            children: \"Mint NFT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {\n            position: \"top-right\",\n            hideProgressBar: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 4\n    }, this) : /*#__PURE__*/_jsxDEV(FinnCard, {\n      setHomeView: setHomeView,\n      setTitle: setTitle,\n      setDescription: setDescription,\n      setAddress: setAddress,\n      transaction_hash: hash,\n      ipfs_url: ipfs_url,\n      wallet_address: address\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 3\n  }, this);\n}\n\n_s(FormCard, \"N9Frum5YmX8ftoiaQ4v97HQeDZM=\");\n\n_c = FormCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormCard\");","map":{"version":3,"sources":["/Users/jenniferhe/Documents/GitHub/oval/src/components/card/card.js"],"names":["PButton","SButton","TButton","Card","Form","Container","InputGroup","FormControl","React","useState","create","ToastContainer","toast","FinnCard","client","global","Buffer","require","FormCard","props","title","setTitle","description","setDescription","quantity","setQuantity","address","setAddress","file","setFile","ipfs_url","setIPFS","homeView","setHomeView","image_path","setPath","hash","setHash","retrieveFile","e","data","target","files","reader","window","FileReader","readAsArrayBuffer","onloadend","result","preventDefault","handleSubmit","created","add","url","path","console","log","success","error","message","value"],"mappings":"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","sourcesContent":["import \"./card.css\";\nimport { PButton, SButton, TButton } from \"../button/button\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport Card from \"react-bootstrap/Card\";\nimport Form from \"react-bootstrap/Form\";\nimport { Container, InputGroup, FormControl } from \"react-bootstrap\";\nimport React, { useState } from \"react\";\nimport { create } from \"ipfs-http-client\";\nimport { ToastContainer, toast } from 'react-toastify';\nimport { FinnCard } from \"./mint_result\";\n\nconst client = create(\"https://ipfs.infura.io:5001/api/v0\");\n\nglobal.Buffer = global.Buffer || require(\"buffer\").Buffer;\n\nexport function FormCard(props) {\n\tconst [title, setTitle] = useState(\"\");\n\tconst [description, setDescription] = useState(\"\");\n\tconst [quantity, setQuantity] = useState(0);\n\tconst [address, setAddress] = useState(\"\");\n\n\tconst [file, setFile] = useState(null); //file info for latest image\n\tconst [ipfs_url, setIPFS] = useState([]); //array of ipfs image urls\n\n\tconst[homeView, setHomeView] = useState(true);\n\n\tconst [image_path, setPath] = useState(\"./ipfs image.png\")\n\t// const [ipfs_url, setIPFS] = useState(\"https://ipfs.infura.io:dummyURL\")\n\t\n\tconst [hash, setHash] = useState(\"dummy-hash\") //will come from backend eventually\n\n\tconst retrieveFile = (e) => {\n\t\tconst data = e.target.files[0];\n\t\tconst reader = new window.FileReader();\n\t\treader.readAsArrayBuffer(data);\n\t\treader.onloadend = () => {\n\t\t\tsetFile(Buffer(reader.result));\n\t\t};\n\n\t\te.preventDefault();\n\t};\n\n\tconst handleSubmit = async (e) => {\n\t\t// console.log(`about to submit nft form. props = ${props}, props.setHome = ${props.setHome}.`)\n\t\te.preventDefault();\n\t\ttry {\n\t\t\tconst created = await client.add(file);\n\t\t\tconst url = `https://ipfs.infura.io/ipfs/${created.path}`;\n\t\t\tconsole.log(url);\n\t\t\tsetIPFS(url);\n\t\t\ttoast.success(\"NFT Minted!\");\n\t\t\tsetHomeView(false)\n\t\t} catch (error) {\n\t\t\tconsole.log(error.message);\n\t\t}\n\t};\n\n\treturn (\n\t\t<div className=\"all-card\">\n\t\t{homeView ? \n\t\t\t<Card>\n\t\t\t\t<Card.Header>Mint your NFT</Card.Header>\n\t\t\t\t<div className=\"card-contents\">\n\t\t\t\t\t<label className=\"p3\" htmlFor=\"title\">\n\t\t\t\t\t\tTitle\n\t\t\t\t\t</label>\n\t\t\t\t\t<InputGroup className=\"form-contents\">\n\t\t\t\t\t\t<FormControl\n\t\t\t\t\t\t\tid=\"title\"\n\t\t\t\t\t\t\taria-label=\"Title\"\n\t\t\t\t\t\t\taria-describedby=\"title\"\n\t\t\t\t\t\t\tvalue={title}\n\t\t\t\t\t\t\tonChange={(e) => setTitle(e.target.value)}\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</InputGroup>\n\t\t\t\t\t<label className=\"p3\" htmlFor=\"description\">\n\t\t\t\t\t\tDescription\n\t\t\t\t\t</label>\n\t\t\t\t\t<InputGroup className=\"form-contents\">\n\t\t\t\t\t\t<FormControl\n\t\t\t\t\t\t\tid=\"description\"\n\t\t\t\t\t\t\taria-label=\"Description\"\n\t\t\t\t\t\t\taria-describedby=\"description\"\n\t\t\t\t\t\t\tvalue={description}\n\t\t\t\t\t\t\tonChange={(e) => setDescription(e.target.value)}\n\t\t\t\t\t\t\tas=\"textarea\"\n\t\t\t\t\t\t\trows={3}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</InputGroup>\n\t\t\t\t\t{/* <label className=\"p3\" htmlFor=\"quantity\">\n\t\t\t\t\t\tQuantity\n\t\t\t\t\t</label>\n\t\t\t\t\t<InputGroup className=\"form-contents\">\n\t\t\t\t\t\t<FormControl\n\t\t\t\t\t\t\tid=\"quantity\"\n\t\t\t\t\t\t\taria-label=\"Quantity\"\n\t\t\t\t\t\t\taria-describedby=\"quantity\"\n\t\t\t\t\t\t\tvalue={quantity}\n\t\t\t\t\t\t\tonChange={(e) => setQuantity(e.target.value)}\n\t\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</InputGroup> */}\n\t\t\t\t\t<label className=\"p3\" htmlFor=\"wallet-address\">\n\t\t\t\t\t\tWallet Address\n\t\t\t\t\t</label>\n\t\t\t\t\t<InputGroup className=\"form-contents\">\n\t\t\t\t\t\t<FormControl\n\t\t\t\t\t\t\tid=\"address\"\n\t\t\t\t\t\t\taria-label=\"Wallet Address\"\n\t\t\t\t\t\t\taria-describedby=\"wallet-address\"\n\t\t\t\t\t\t\tvalue={address}\n\t\t\t\t\t\t\tonChange={(e) => setAddress(e.target.value)}\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</InputGroup>\n\t\t\t\t\t<label className=\"p3\" htmlFor=\"upload-nft\">\n\t\t\t\t\t\tUpload NFT\n\t\t\t\t\t</label>\n\t\t\t\t\t<InputGroup className=\"form-contents\">\n\t\t\t\t\t\t<FormControl id=\"file\" type=\"file\"\n\t\t\t\t\t\t\tname=\"data\"\n\t\t\t\t\t\t\tonChange={retrieveFile} />\n\t\t\t\t\t</InputGroup>\n\t\t\t\t\t<div className=\"Button\">\n\t\t\t\t\t\t<PButton type=\"submit\" onClick={handleSubmit}>Mint NFT</PButton>\n\t\t\t\t\t\t<ToastContainer position=\"top-right\" hideProgressBar={true} />\n\t\t\t\t\t</div>\n{/* \n\t\t\t\t\t<div className=\"display\">\n\t\t\t\t\t\t{ipfs_url.length !== 0 ? (\n\t\t\t\t\t\t\t<img src={ipfs_url} alt=\"nfts\" key={ipfs_url} width=\"40%\" height=\"40%\" />\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<div />\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div> */}\n\t\t\t\t</div>\n\t\t\t</Card> \n\t\t\t:\n\t\t\t<FinnCard setHomeView = {setHomeView} setTitle = {setTitle} setDescription = {setDescription} setAddress = {setAddress} transaction_hash = {hash} ipfs_url = {ipfs_url} wallet_address = {address}/>\n\n\t\t}\n\t\t</div>\n\t);\n}"]},"metadata":{},"sourceType":"module"}