{"ast":null,"code":"import _objectSpread from \"/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/@babel/runtime/regenerator/index.js\";\nimport { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { abortSignal } from '../lib/abort-signal.js';\nexport var createPut = function createPut(codecs, options) {\n  var fn = configure(function (api) {\n    var put = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dagNode) {\n        var options,\n            settings,\n            serialized,\n            storeCodec,\n            controller,\n            signal,\n            res,\n            data,\n            _args = arguments;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n                settings = _objectSpread({\n                  storeCodec: 'dag-cbor',\n                  hashAlg: 'sha2-256'\n                }, options);\n\n                if (!settings.inputCodec) {\n                  _context.next = 8;\n                  break;\n                }\n\n                if (dagNode instanceof Uint8Array) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw new Error('Can only inputCodec on raw bytes that can be decoded');\n\n              case 5:\n                serialized = dagNode;\n                _context.next = 13;\n                break;\n\n              case 8:\n                _context.next = 10;\n                return codecs.getCodec(settings.storeCodec);\n\n              case 10:\n                storeCodec = _context.sent;\n                serialized = storeCodec.encode(dagNode);\n                settings.inputCodec = settings.storeCodec;\n\n              case 13:\n                controller = new AbortController();\n                signal = abortSignal(controller.signal, settings.signal);\n                _context.t0 = api;\n                _context.t1 = _objectSpread;\n                _context.t2 = {\n                  timeout: settings.timeout,\n                  signal: signal,\n                  searchParams: toUrlSearchParams(settings)\n                };\n                _context.next = 20;\n                return multipartRequest([serialized], controller, settings.headers);\n\n              case 20:\n                _context.t3 = _context.sent;\n                _context.t4 = (0, _context.t1)(_context.t2, _context.t3);\n                _context.next = 24;\n                return _context.t0.post.call(_context.t0, 'dag/put', _context.t4);\n\n              case 24:\n                res = _context.sent;\n                _context.next = 27;\n                return res.json();\n\n              case 27:\n                data = _context.sent;\n                return _context.abrupt(\"return\", CID.parse(data.Cid['/']));\n\n              case 29:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function put(_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return put;\n  });\n  return fn(options);\n};","map":{"version":3,"sources":["/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/ipfs-http-client/esm/src/dag/put.js"],"names":["CID","configure","multipartRequest","toUrlSearchParams","abortSignal","createPut","codecs","options","fn","api","put","dagNode","settings","storeCodec","hashAlg","inputCodec","Uint8Array","Error","serialized","getCodec","encode","controller","AbortController","signal","timeout","searchParams","headers","post","res","json","data","parse","Cid"],"mappings":";;;AAAA,SAASA,GAAT,QAAoB,kBAApB;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,gBAAT,QAAiC,mCAAjC;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,MAAD,EAASC,OAAT,EAAqB;AAC5C,MAAMC,EAAE,GAAGP,SAAS,CAAC,UAAAQ,GAAG,EAAI;AAC1B,QAAMC,GAAG;AAAA,0EAAG,iBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAgBJ,gBAAAA,OAAhB,2DAA0B,EAA1B;AACJK,gBAAAA,QADI;AAERC,kBAAAA,UAAU,EAAE,UAFJ;AAGRC,kBAAAA,OAAO,EAAE;AAHD,mBAILP,OAJK;;AAAA,qBAONK,QAAQ,CAACG,UAPH;AAAA;AAAA;AAAA;;AAAA,oBAQFJ,OAAO,YAAYK,UARjB;AAAA;AAAA;AAAA;;AAAA,sBASA,IAAIC,KAAJ,CAAU,sDAAV,CATA;;AAAA;AAWRC,gBAAAA,UAAU,GAAGP,OAAb;AAXQ;AAAA;;AAAA;AAAA;AAAA,uBAaiBL,MAAM,CAACa,QAAP,CAAgBP,QAAQ,CAACC,UAAzB,CAbjB;;AAAA;AAaFA,gBAAAA,UAbE;AAcRK,gBAAAA,UAAU,GAAGL,UAAU,CAACO,MAAX,CAAkBT,OAAlB,CAAb;AACAC,gBAAAA,QAAQ,CAACG,UAAT,GAAsBH,QAAQ,CAACC,UAA/B;;AAfQ;AAiBJQ,gBAAAA,UAjBI,GAiBS,IAAIC,eAAJ,EAjBT;AAkBJC,gBAAAA,MAlBI,GAkBKnB,WAAW,CAACiB,UAAU,CAACE,MAAZ,EAAoBX,QAAQ,CAACW,MAA7B,CAlBhB;AAAA,8BAmBQd,GAnBR;AAAA;AAAA;AAoBRe,kBAAAA,OAAO,EAAEZ,QAAQ,CAACY,OApBV;AAqBRD,kBAAAA,MAAM,EAANA,MArBQ;AAsBRE,kBAAAA,YAAY,EAAEtB,iBAAiB,CAACS,QAAD;AAtBvB;AAAA;AAAA,uBAuBCV,gBAAgB,CAAC,CAACgB,UAAD,CAAD,EAAeG,UAAf,EAA2BT,QAAQ,CAACc,OAApC,CAvBjB;;AAAA;AAAA;AAAA;AAAA;AAAA,mCAmBYC,IAnBZ,mBAmBiB,SAnBjB;;AAAA;AAmBJC,gBAAAA,GAnBI;AAAA;AAAA,uBAyBSA,GAAG,CAACC,IAAJ,EAzBT;;AAAA;AAyBJC,gBAAAA,IAzBI;AAAA,iDA0BH9B,GAAG,CAAC+B,KAAJ,CAAUD,IAAI,CAACE,GAAL,CAAS,GAAT,CAAV,CA1BG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAHtB,GAAG;AAAA;AAAA;AAAA,OAAT;;AA4BA,WAAOA,GAAP;AACD,GA9BmB,CAApB;AA+BA,SAAOF,EAAE,CAACD,OAAD,CAAT;AACD,CAjCM","sourcesContent":["import { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { abortSignal } from '../lib/abort-signal.js';\nexport const createPut = (codecs, options) => {\n  const fn = configure(api => {\n    const put = async (dagNode, options = {}) => {\n      const settings = {\n        storeCodec: 'dag-cbor',\n        hashAlg: 'sha2-256',\n        ...options\n      };\n      let serialized;\n      if (settings.inputCodec) {\n        if (!(dagNode instanceof Uint8Array)) {\n          throw new Error('Can only inputCodec on raw bytes that can be decoded');\n        }\n        serialized = dagNode;\n      } else {\n        const storeCodec = await codecs.getCodec(settings.storeCodec);\n        serialized = storeCodec.encode(dagNode);\n        settings.inputCodec = settings.storeCodec;\n      }\n      const controller = new AbortController();\n      const signal = abortSignal(controller.signal, settings.signal);\n      const res = await api.post('dag/put', {\n        timeout: settings.timeout,\n        signal,\n        searchParams: toUrlSearchParams(settings),\n        ...await multipartRequest([serialized], controller, settings.headers)\n      });\n      const data = await res.json();\n      return CID.parse(data.Cid['/']);\n    };\n    return put;\n  });\n  return fn(options);\n};"]},"metadata":{},"sourceType":"module"}