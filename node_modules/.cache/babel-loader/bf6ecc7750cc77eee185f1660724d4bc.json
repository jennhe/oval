{"ast":null,"code":"import { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { base64url } from 'multiformats/bases/base64';\n\nvar rpcArrayToTextArray = function rpcArrayToTextArray(strings) {\n  if (Array.isArray(strings)) {\n    return strings.map(rpcToText);\n  }\n\n  return strings;\n};\n\nvar rpcToText = function rpcToText(mb) {\n  return uint8ArrayToString(rpcToBytes(mb));\n};\n\nvar rpcToBytes = function rpcToBytes(mb) {\n  return base64url.decode(mb);\n};\n\nvar textToUrlSafeRpc = function textToUrlSafeRpc(text) {\n  return base64url.encode(uint8ArrayFromString(text));\n};\n\nexport { rpcArrayToTextArray, rpcToText, rpcToBytes, textToUrlSafeRpc };","map":{"version":3,"sources":["/Users/jenniferhe/Documents/GitHub/oval/node_modules/ipfs-http-client/esm/src/lib/http-rpc-wire-format.js"],"names":["fromString","uint8ArrayFromString","toString","uint8ArrayToString","base64url","rpcArrayToTextArray","strings","Array","isArray","map","rpcToText","mb","rpcToBytes","decode","textToUrlSafeRpc","text","encode"],"mappings":"AAAA,SAASA,UAAU,IAAIC,oBAAvB,QAAmD,yBAAnD;AACA,SAASC,QAAQ,IAAIC,kBAArB,QAA+C,uBAA/C;AACA,SAASC,SAAT,QAA0B,2BAA1B;;AACA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAAC,OAAO,EAAI;AACrC,MAAIC,KAAK,CAACC,OAAN,CAAcF,OAAd,CAAJ,EAA4B;AAC1B,WAAOA,OAAO,CAACG,GAAR,CAAYC,SAAZ,CAAP;AACD;;AACD,SAAOJ,OAAP;AACD,CALD;;AAMA,IAAMI,SAAS,GAAG,SAAZA,SAAY,CAAAC,EAAE;AAAA,SAAIR,kBAAkB,CAACS,UAAU,CAACD,EAAD,CAAX,CAAtB;AAAA,CAApB;;AACA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAAD,EAAE;AAAA,SAAIP,SAAS,CAACS,MAAV,CAAiBF,EAAjB,CAAJ;AAAA,CAArB;;AACA,IAAMG,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAC,IAAI;AAAA,SAAIX,SAAS,CAACY,MAAV,CAAiBf,oBAAoB,CAACc,IAAD,CAArC,CAAJ;AAAA,CAA7B;;AACA,SACEV,mBADF,EAEEK,SAFF,EAGEE,UAHF,EAIEE,gBAJF","sourcesContent":["import { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { base64url } from 'multiformats/bases/base64';\nconst rpcArrayToTextArray = strings => {\n  if (Array.isArray(strings)) {\n    return strings.map(rpcToText);\n  }\n  return strings;\n};\nconst rpcToText = mb => uint8ArrayToString(rpcToBytes(mb));\nconst rpcToBytes = mb => base64url.decode(mb);\nconst textToUrlSafeRpc = text => base64url.encode(uint8ArrayFromString(text));\nexport {\n  rpcArrayToTextArray,\n  rpcToText,\n  rpcToBytes,\n  textToUrlSafeRpc\n};"]},"metadata":{},"sourceType":"module"}