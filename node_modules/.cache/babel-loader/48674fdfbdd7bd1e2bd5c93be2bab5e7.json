{"ast":null,"code":"import _awaitAsyncGenerator from \"/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _wrapAsyncGenerator from \"/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _asyncIterator from \"/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport _regeneratorRuntime from \"/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/@babel/runtime/regenerator/index.js\";\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { abortSignal } from '../lib/abort-signal.js';\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request';\nimport { CID } from 'multiformats/cid';\nexport var createImport = configure(function (api) {\n  function dagImport(_x) {\n    return _dagImport.apply(this, arguments);\n  }\n\n  function _dagImport() {\n    _dagImport = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(source) {\n      var options,\n          controller,\n          signal,\n          _yield$_awaitAsyncGen,\n          headers,\n          body,\n          res,\n          _iteratorAbruptCompletion,\n          _didIteratorError,\n          _iteratorError,\n          _iterator,\n          _step,\n          Root,\n          Cid,\n          PinErrorMsg,\n          _args = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              controller = new AbortController();\n              signal = abortSignal(controller.signal, options.signal);\n              _context.next = 5;\n              return _awaitAsyncGenerator(multipartRequest(source, controller, options.headers));\n\n            case 5:\n              _yield$_awaitAsyncGen = _context.sent;\n              headers = _yield$_awaitAsyncGen.headers;\n              body = _yield$_awaitAsyncGen.body;\n              _context.next = 10;\n              return _awaitAsyncGenerator(api.post('dag/import', {\n                signal: signal,\n                headers: headers,\n                body: body,\n                searchParams: toUrlSearchParams({\n                  'pin-roots': options.pinRoots\n                })\n              }));\n\n            case 10:\n              res = _context.sent;\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context.prev = 13;\n              _iterator = _asyncIterator(res.ndjson());\n\n            case 15:\n              _context.next = 17;\n              return _awaitAsyncGenerator(_iterator.next());\n\n            case 17:\n              if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n                _context.next = 26;\n                break;\n              }\n\n              Root = _step.value.Root;\n\n              if (!(Root !== undefined)) {\n                _context.next = 23;\n                break;\n              }\n\n              Cid = Root.Cid['/'], PinErrorMsg = Root.PinErrorMsg;\n              _context.next = 23;\n              return {\n                root: {\n                  cid: CID.parse(Cid),\n                  pinErrorMsg: PinErrorMsg\n                }\n              };\n\n            case 23:\n              _iteratorAbruptCompletion = false;\n              _context.next = 15;\n              break;\n\n            case 26:\n              _context.next = 32;\n              break;\n\n            case 28:\n              _context.prev = 28;\n              _context.t0 = _context[\"catch\"](13);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n\n            case 32:\n              _context.prev = 32;\n              _context.prev = 33;\n\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context.next = 37;\n                break;\n              }\n\n              _context.next = 37;\n              return _awaitAsyncGenerator(_iterator.return());\n\n            case 37:\n              _context.prev = 37;\n\n              if (!_didIteratorError) {\n                _context.next = 40;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 40:\n              return _context.finish(37);\n\n            case 41:\n              return _context.finish(32);\n\n            case 42:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[13, 28, 32, 42], [33,, 37, 41]]);\n    }));\n    return _dagImport.apply(this, arguments);\n  }\n\n  return dagImport;\n});","map":{"version":3,"sources":["/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/ipfs-http-client/esm/src/dag/import.js"],"names":["configure","toUrlSearchParams","abortSignal","multipartRequest","CID","createImport","api","dagImport","source","options","controller","AbortController","signal","headers","body","post","searchParams","pinRoots","res","ndjson","Root","undefined","Cid","PinErrorMsg","root","cid","parse","pinErrorMsg"],"mappings":";;;;AAAA,SAASA,SAAT,QAA0B,qBAA1B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,SAASC,gBAAT,QAAiC,mCAAjC;AACA,SAASC,GAAT,QAAoB,kBAApB;AACA,OAAO,IAAMC,YAAY,GAAGL,SAAS,CAAC,UAAAM,GAAG,EAAI;AAAA,WAC3BC,SAD2B;AAAA;AAAA;;AAAA;AAAA,4EAC3C,iBAA0BC,MAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAkCC,cAAAA,OAAlC,2DAA4C,EAA5C;AACQC,cAAAA,UADR,GACqB,IAAIC,eAAJ,EADrB;AAEQC,cAAAA,MAFR,GAEiBV,WAAW,CAACQ,UAAU,CAACE,MAAZ,EAAoBH,OAAO,CAACG,MAA5B,CAF5B;AAAA;AAAA,0CAGgCT,gBAAgB,CAACK,MAAD,EAASE,UAAT,EAAqBD,OAAO,CAACI,OAA7B,CAHhD;;AAAA;AAAA;AAGSA,cAAAA,OAHT,yBAGSA,OAHT;AAGkBC,cAAAA,IAHlB,yBAGkBA,IAHlB;AAAA;AAAA,0CAIoBR,GAAG,CAACS,IAAJ,CAAS,YAAT,EAAuB;AACvCH,gBAAAA,MAAM,EAANA,MADuC;AAEvCC,gBAAAA,OAAO,EAAPA,OAFuC;AAGvCC,gBAAAA,IAAI,EAAJA,IAHuC;AAIvCE,gBAAAA,YAAY,EAAEf,iBAAiB,CAAC;AAAE,+BAAaQ,OAAO,CAACQ;AAAvB,iBAAD;AAJQ,eAAvB,CAJpB;;AAAA;AAIQC,cAAAA,GAJR;AAAA;AAAA;AAAA;AAAA,yCAU6BA,GAAG,CAACC,MAAJ,EAV7B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUoBC,cAAAA,IAVpB,eAUoBA,IAVpB;;AAAA,oBAWQA,IAAI,KAAKC,SAXjB;AAAA;AAAA;AAAA;;AAamBC,cAAAA,GAbnB,GAeUF,IAfV,CAaQE,GAbR,CAac,GAbd,GAcQC,WAdR,GAeUH,IAfV,CAcQG,WAdR;AAAA;AAgBM,qBAAM;AACJC,gBAAAA,IAAI,EAAE;AACJC,kBAAAA,GAAG,EAAErB,GAAG,CAACsB,KAAJ,CAAUJ,GAAV,CADD;AAEJK,kBAAAA,WAAW,EAAEJ;AAFT;AADF,eAAN;;AAhBN;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAD2C;AAAA;AAAA;;AA0B3C,SAAOhB,SAAP;AACD,CA3BoC,CAA9B","sourcesContent":["import { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { abortSignal } from '../lib/abort-signal.js';\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request';\nimport { CID } from 'multiformats/cid';\nexport const createImport = configure(api => {\n  async function* dagImport(source, options = {}) {\n    const controller = new AbortController();\n    const signal = abortSignal(controller.signal, options.signal);\n    const {headers, body} = await multipartRequest(source, controller, options.headers);\n    const res = await api.post('dag/import', {\n      signal,\n      headers,\n      body,\n      searchParams: toUrlSearchParams({ 'pin-roots': options.pinRoots })\n    });\n    for await (const {Root} of res.ndjson()) {\n      if (Root !== undefined) {\n        const {\n          Cid: {'/': Cid},\n          PinErrorMsg\n        } = Root;\n        yield {\n          root: {\n            cid: CID.parse(Cid),\n            pinErrorMsg: PinErrorMsg\n          }\n        };\n      }\n    }\n  }\n  return dagImport;\n});"]},"metadata":{},"sourceType":"module"}