{"ast":null,"code":"import _wrapAsyncGenerator from \"/Users/jenniferhe/Documents/GitHub/oval/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _awaitAsyncGenerator from \"/Users/jenniferhe/Documents/GitHub/oval/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _asyncIterator from \"/Users/jenniferhe/Documents/GitHub/oval/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport _asyncGeneratorDelegate from \"/Users/jenniferhe/Documents/GitHub/oval/node_modules/@babel/runtime/helpers/esm/asyncGeneratorDelegate.js\";\nimport _regeneratorRuntime from \"/Users/jenniferhe/Documents/GitHub/oval/node_modules/@babel/runtime/regenerator/index.js\";\nimport { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport var createGc = configure(function (api) {\n  function gc() {\n    return _gc.apply(this, arguments);\n  }\n\n  function _gc() {\n    _gc = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var options,\n          res,\n          _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n              _context.next = 3;\n              return _awaitAsyncGenerator(api.post('repo/gc', {\n                signal: options.signal,\n                searchParams: toUrlSearchParams(options),\n                headers: options.headers,\n                transform: function transform(res) {\n                  return {\n                    err: res.Error ? new Error(res.Error) : null,\n                    cid: (res.Key || {})['/'] ? CID.parse(res.Key['/']) : null\n                  };\n                }\n              }));\n\n            case 3:\n              res = _context.sent;\n              return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator(res.ndjson()), _awaitAsyncGenerator), \"t0\", 5);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _gc.apply(this, arguments);\n  }\n\n  return gc;\n});","map":{"version":3,"sources":["/Users/jenniferhe/Documents/GitHub/oval/node_modules/ipfs-http-client/esm/src/repo/gc.js"],"names":["CID","configure","toUrlSearchParams","createGc","api","gc","options","post","signal","searchParams","headers","transform","res","err","Error","cid","Key","parse","ndjson"],"mappings":";;;;;AAAA,SAASA,GAAT,QAAoB,kBAApB;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,OAAO,IAAMC,QAAQ,GAAGF,SAAS,CAAC,UAAAG,GAAG,EAAI;AAAA,WACvBC,EADuB;AAAA;AAAA;;AAAA;AAAA,qEACvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmBC,cAAAA,OAAnB,2DAA6B,EAA7B;AAAA;AAAA,0CACoBF,GAAG,CAACG,IAAJ,CAAS,SAAT,EAAoB;AACpCC,gBAAAA,MAAM,EAAEF,OAAO,CAACE,MADoB;AAEpCC,gBAAAA,YAAY,EAAEP,iBAAiB,CAACI,OAAD,CAFK;AAGpCI,gBAAAA,OAAO,EAAEJ,OAAO,CAACI,OAHmB;AAIpCC,gBAAAA,SAAS,EAAE,mBAAAC,GAAG,EAAI;AAChB,yBAAO;AACLC,oBAAAA,GAAG,EAAED,GAAG,CAACE,KAAJ,GAAY,IAAIA,KAAJ,CAAUF,GAAG,CAACE,KAAd,CAAZ,GAAmC,IADnC;AAELC,oBAAAA,GAAG,EAAE,CAACH,GAAG,CAACI,GAAJ,IAAW,EAAZ,EAAgB,GAAhB,IAAuBhB,GAAG,CAACiB,KAAJ,CAAUL,GAAG,CAACI,GAAJ,CAAQ,GAAR,CAAV,CAAvB,GAAiD;AAFjD,mBAAP;AAID;AATmC,eAApB,CADpB;;AAAA;AACQJ,cAAAA,GADR;AAYE,mFAAOA,GAAG,CAACM,MAAJ,EAAP;;AAZF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADuC;AAAA;AAAA;;AAevC,SAAOb,EAAP;AACD,CAhBgC,CAA1B","sourcesContent":["import { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport const createGc = configure(api => {\n  async function* gc(options = {}) {\n    const res = await api.post('repo/gc', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers,\n      transform: res => {\n        return {\n          err: res.Error ? new Error(res.Error) : null,\n          cid: (res.Key || {})['/'] ? CID.parse(res.Key['/']) : null\n        };\n      }\n    });\n    yield* res.ndjson();\n  }\n  return gc;\n});"]},"metadata":{},"sourceType":"module"}