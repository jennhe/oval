{"ast":null,"code":"import _objectSpread from \"/Users/jenniferhe/Documents/GitHub/oval/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/Users/jenniferhe/Documents/GitHub/oval/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/jenniferhe/Documents/GitHub/oval/node_modules/@babel/runtime/regenerator/index.js\";\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { Multiaddr } from 'multiaddr';\nexport var createAdd = configure(function (api) {\n  function add(_x) {\n    return _add.apply(this, arguments);\n  }\n\n  function _add() {\n    _add = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(addr) {\n      var options,\n          res,\n          _yield$res$json,\n          Peers,\n          _args = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              _context.next = 3;\n              return api.post('bootstrap/add', {\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: addr\n                }, options)),\n                headers: options.headers\n              });\n\n            case 3:\n              res = _context.sent;\n              _context.next = 6;\n              return res.json();\n\n            case 6:\n              _yield$res$json = _context.sent;\n              Peers = _yield$res$json.Peers;\n              return _context.abrupt(\"return\", {\n                Peers: Peers.map(function (ma) {\n                  return new Multiaddr(ma);\n                })\n              });\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _add.apply(this, arguments);\n  }\n\n  return add;\n});","map":{"version":3,"sources":["/Users/jenniferhe/Documents/GitHub/oval/node_modules/ipfs-http-client/esm/src/bootstrap/add.js"],"names":["configure","toUrlSearchParams","Multiaddr","createAdd","api","add","addr","options","post","signal","searchParams","arg","headers","res","json","Peers","map","ma"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,qBAA1B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,SAASC,SAAT,QAA0B,WAA1B;AACA,OAAO,IAAMC,SAAS,GAAGH,SAAS,CAAC,UAAAI,GAAG,EAAI;AAAA,WACzBC,GADyB;AAAA;AAAA;;AAAA;AAAA,oEACxC,iBAAmBC,IAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAyBC,cAAAA,OAAzB,2DAAmC,EAAnC;AAAA;AAAA,qBACoBH,GAAG,CAACI,IAAJ,CAAS,eAAT,EAA0B;AAC1CC,gBAAAA,MAAM,EAAEF,OAAO,CAACE,MAD0B;AAE1CC,gBAAAA,YAAY,EAAET,iBAAiB;AAC7BU,kBAAAA,GAAG,EAAEL;AADwB,mBAE1BC,OAF0B,EAFW;AAM1CK,gBAAAA,OAAO,EAAEL,OAAO,CAACK;AANyB,eAA1B,CADpB;;AAAA;AACQC,cAAAA,GADR;AAAA;AAAA,qBASwBA,GAAG,CAACC,IAAJ,EATxB;;AAAA;AAAA;AASSC,cAAAA,KATT,mBASSA,KATT;AAAA,+CAUS;AAAEA,gBAAAA,KAAK,EAAEA,KAAK,CAACC,GAAN,CAAU,UAAAC,EAAE;AAAA,yBAAI,IAAIf,SAAJ,CAAce,EAAd,CAAJ;AAAA,iBAAZ;AAAT,eAVT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADwC;AAAA;AAAA;;AAaxC,SAAOZ,GAAP;AACD,CAdiC,CAA3B","sourcesContent":["import { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { Multiaddr } from 'multiaddr';\nexport const createAdd = configure(api => {\n  async function add(addr, options = {}) {\n    const res = await api.post('bootstrap/add', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: addr,\n        ...options\n      }),\n      headers: options.headers\n    });\n    const {Peers} = await res.json();\n    return { Peers: Peers.map(ma => new Multiaddr(ma)) };\n  }\n  return add;\n});"]},"metadata":{},"sourceType":"module"}