{"ast":null,"code":"import _objectSpread from \"/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/@babel/runtime/regenerator/index.js\";\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport var createSet = configure(function (api) {\n  var set = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(key, value) {\n      var options,\n          params,\n          res,\n          _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n\n              if (!(typeof key !== 'string')) {\n                _context.next = 3;\n                break;\n              }\n\n              throw new Error('Invalid key type');\n\n            case 3:\n              params = _objectSpread(_objectSpread({}, options), encodeParam(key, value));\n              _context.next = 6;\n              return api.post('config', {\n                signal: options.signal,\n                searchParams: toUrlSearchParams(params),\n                headers: options.headers\n              });\n\n            case 6:\n              res = _context.sent;\n              _context.next = 9;\n              return res.text();\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function set(_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return set;\n});\n\nvar encodeParam = function encodeParam(key, value) {\n  switch (typeof value) {\n    case 'boolean':\n      return {\n        arg: [key, value.toString()],\n        bool: true\n      };\n\n    case 'string':\n      return {\n        arg: [key, value]\n      };\n\n    default:\n      return {\n        arg: [key, JSON.stringify(value)],\n        json: true\n      };\n  }\n};","map":{"version":3,"sources":["/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/ipfs-http-client/esm/src/config/set.js"],"names":["configure","toUrlSearchParams","createSet","api","set","key","value","options","Error","params","encodeParam","post","signal","searchParams","headers","res","text","arg","toString","bool","JSON","stringify","json"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,qBAA1B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,OAAO,IAAMC,SAAS,GAAGF,SAAS,CAAC,UAAAG,GAAG,EAAI;AACxC,MAAMC,GAAG;AAAA,wEAAG,iBAAOC,GAAP,EAAYC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmBC,cAAAA,OAAnB,2DAA6B,EAA7B;;AAAA,oBACN,OAAOF,GAAP,KAAe,QADT;AAAA;AAAA;AAAA;;AAAA,oBAEF,IAAIG,KAAJ,CAAU,kBAAV,CAFE;;AAAA;AAIJC,cAAAA,MAJI,mCAKLF,OALK,GAMLG,WAAW,CAACL,GAAD,EAAMC,KAAN,CANN;AAAA;AAAA,qBAQQH,GAAG,CAACQ,IAAJ,CAAS,QAAT,EAAmB;AACnCC,gBAAAA,MAAM,EAAEL,OAAO,CAACK,MADmB;AAEnCC,gBAAAA,YAAY,EAAEZ,iBAAiB,CAACQ,MAAD,CAFI;AAGnCK,gBAAAA,OAAO,EAAEP,OAAO,CAACO;AAHkB,eAAnB,CARR;;AAAA;AAQJC,cAAAA,GARI;AAAA;AAAA,qBAaJA,GAAG,CAACC,IAAJ,EAbI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAHZ,GAAG;AAAA;AAAA;AAAA,KAAT;;AAeA,SAAOA,GAAP;AACD,CAjBiC,CAA3B;;AAkBP,IAAMM,WAAW,GAAG,SAAdA,WAAc,CAACL,GAAD,EAAMC,KAAN,EAAgB;AAClC,UAAQ,OAAOA,KAAf;AACA,SAAK,SAAL;AACE,aAAO;AACLW,QAAAA,GAAG,EAAE,CACHZ,GADG,EAEHC,KAAK,CAACY,QAAN,EAFG,CADA;AAKLC,QAAAA,IAAI,EAAE;AALD,OAAP;;AAOF,SAAK,QAAL;AACE,aAAO;AACLF,QAAAA,GAAG,EAAE,CACHZ,GADG,EAEHC,KAFG;AADA,OAAP;;AAMF;AACE,aAAO;AACLW,QAAAA,GAAG,EAAE,CACHZ,GADG,EAEHe,IAAI,CAACC,SAAL,CAAef,KAAf,CAFG,CADA;AAKLgB,QAAAA,IAAI,EAAE;AALD,OAAP;AAjBF;AAyBD,CA1BD","sourcesContent":["import { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport const createSet = configure(api => {\n  const set = async (key, value, options = {}) => {\n    if (typeof key !== 'string') {\n      throw new Error('Invalid key type');\n    }\n    const params = {\n      ...options,\n      ...encodeParam(key, value)\n    };\n    const res = await api.post('config', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(params),\n      headers: options.headers\n    });\n    await res.text();\n  };\n  return set;\n});\nconst encodeParam = (key, value) => {\n  switch (typeof value) {\n  case 'boolean':\n    return {\n      arg: [\n        key,\n        value.toString()\n      ],\n      bool: true\n    };\n  case 'string':\n    return {\n      arg: [\n        key,\n        value\n      ]\n    };\n  default:\n    return {\n      arg: [\n        key,\n        JSON.stringify(value)\n      ],\n      json: true\n    };\n  }\n};"]},"metadata":{},"sourceType":"module"}