{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _awaitAsyncGenerator from \"/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _wrapAsyncGenerator from \"/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _asyncIterator from \"/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport _regeneratorRuntime from \"/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/@babel/runtime/regenerator/index.js\";\nimport errCode from 'err-code';\nimport { CID } from 'multiformats/cid';\nexport function normaliseInput(_x) {\n  return _normaliseInput.apply(this, arguments);\n}\n\nfunction _normaliseInput() {\n  _normaliseInput = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(input) {\n    var cid, iterator, first, _iterator3, _step3, _cid, _iterator4, _step4, obj, _iterator5, _first, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, _cid2, _iteratorAbruptCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _obj;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(input === null || input === undefined)) {\n              _context.next = 2;\n              break;\n            }\n\n            throw errCode(new Error(\"Unexpected input: \".concat(input)), 'ERR_UNEXPECTED_INPUT');\n\n          case 2:\n            cid = CID.asCID(input);\n\n            if (!cid) {\n              _context.next = 7;\n              break;\n            }\n\n            _context.next = 6;\n            return toPin({\n              cid: cid\n            });\n\n          case 6:\n            return _context.abrupt(\"return\");\n\n          case 7:\n            if (!(input instanceof String || typeof input === 'string')) {\n              _context.next = 11;\n              break;\n            }\n\n            _context.next = 10;\n            return toPin({\n              path: input\n            });\n\n          case 10:\n            return _context.abrupt(\"return\");\n\n          case 11:\n            if (!(input.cid != null || input.path != null)) {\n              _context.next = 15;\n              break;\n            }\n\n            _context.next = 14;\n            return toPin(input);\n\n          case 14:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 15:\n            if (!(Symbol.iterator in input)) {\n              _context.next = 63;\n              break;\n            }\n\n            iterator = input[Symbol.iterator]();\n            first = iterator.next();\n\n            if (!first.done) {\n              _context.next = 20;\n              break;\n            }\n\n            return _context.abrupt(\"return\", iterator);\n\n          case 20:\n            if (!(CID.asCID(first.value) || first.value instanceof String || typeof first.value === 'string')) {\n              _context.next = 41;\n              break;\n            }\n\n            _context.next = 23;\n            return toPin({\n              cid: first.value\n            });\n\n          case 23:\n            _iterator3 = _createForOfIteratorHelper(iterator);\n            _context.prev = 24;\n\n            _iterator3.s();\n\n          case 26:\n            if ((_step3 = _iterator3.n()).done) {\n              _context.next = 32;\n              break;\n            }\n\n            _cid = _step3.value;\n            _context.next = 30;\n            return toPin({\n              cid: _cid\n            });\n\n          case 30:\n            _context.next = 26;\n            break;\n\n          case 32:\n            _context.next = 37;\n            break;\n\n          case 34:\n            _context.prev = 34;\n            _context.t0 = _context[\"catch\"](24);\n\n            _iterator3.e(_context.t0);\n\n          case 37:\n            _context.prev = 37;\n\n            _iterator3.f();\n\n            return _context.finish(37);\n\n          case 40:\n            return _context.abrupt(\"return\");\n\n          case 41:\n            if (!(first.value.cid != null || first.value.path != null)) {\n              _context.next = 62;\n              break;\n            }\n\n            _context.next = 44;\n            return toPin(first.value);\n\n          case 44:\n            _iterator4 = _createForOfIteratorHelper(iterator);\n            _context.prev = 45;\n\n            _iterator4.s();\n\n          case 47:\n            if ((_step4 = _iterator4.n()).done) {\n              _context.next = 53;\n              break;\n            }\n\n            obj = _step4.value;\n            _context.next = 51;\n            return toPin(obj);\n\n          case 51:\n            _context.next = 47;\n            break;\n\n          case 53:\n            _context.next = 58;\n            break;\n\n          case 55:\n            _context.prev = 55;\n            _context.t1 = _context[\"catch\"](45);\n\n            _iterator4.e(_context.t1);\n\n          case 58:\n            _context.prev = 58;\n\n            _iterator4.f();\n\n            return _context.finish(58);\n\n          case 61:\n            return _context.abrupt(\"return\");\n\n          case 62:\n            throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n\n          case 63:\n            if (!(Symbol.asyncIterator in input)) {\n              _context.next = 137;\n              break;\n            }\n\n            _iterator5 = input[Symbol.asyncIterator]();\n            _context.next = 67;\n            return _awaitAsyncGenerator(_iterator5.next());\n\n          case 67:\n            _first = _context.sent;\n\n            if (!_first.done) {\n              _context.next = 70;\n              break;\n            }\n\n            return _context.abrupt(\"return\", _iterator5);\n\n          case 70:\n            if (!(CID.asCID(_first.value) || _first.value instanceof String || typeof _first.value === 'string')) {\n              _context.next = 103;\n              break;\n            }\n\n            _context.next = 73;\n            return toPin({\n              cid: _first.value\n            });\n\n          case 73:\n            _iteratorAbruptCompletion = false;\n            _didIteratorError = false;\n            _context.prev = 75;\n            _iterator = _asyncIterator(_iterator5);\n\n          case 77:\n            _context.next = 79;\n            return _awaitAsyncGenerator(_iterator.next());\n\n          case 79:\n            if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n              _context.next = 86;\n              break;\n            }\n\n            _cid2 = _step.value;\n            _context.next = 83;\n            return toPin({\n              cid: _cid2\n            });\n\n          case 83:\n            _iteratorAbruptCompletion = false;\n            _context.next = 77;\n            break;\n\n          case 86:\n            _context.next = 92;\n            break;\n\n          case 88:\n            _context.prev = 88;\n            _context.t2 = _context[\"catch\"](75);\n            _didIteratorError = true;\n            _iteratorError = _context.t2;\n\n          case 92:\n            _context.prev = 92;\n            _context.prev = 93;\n\n            if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n              _context.next = 97;\n              break;\n            }\n\n            _context.next = 97;\n            return _awaitAsyncGenerator(_iterator.return());\n\n          case 97:\n            _context.prev = 97;\n\n            if (!_didIteratorError) {\n              _context.next = 100;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 100:\n            return _context.finish(97);\n\n          case 101:\n            return _context.finish(92);\n\n          case 102:\n            return _context.abrupt(\"return\");\n\n          case 103:\n            if (!(_first.value.cid != null || _first.value.path != null)) {\n              _context.next = 136;\n              break;\n            }\n\n            _context.next = 106;\n            return toPin(_first.value);\n\n          case 106:\n            _iteratorAbruptCompletion2 = false;\n            _didIteratorError2 = false;\n            _context.prev = 108;\n            _iterator2 = _asyncIterator(_iterator5);\n\n          case 110:\n            _context.next = 112;\n            return _awaitAsyncGenerator(_iterator2.next());\n\n          case 112:\n            if (!(_iteratorAbruptCompletion2 = !(_step2 = _context.sent).done)) {\n              _context.next = 119;\n              break;\n            }\n\n            _obj = _step2.value;\n            _context.next = 116;\n            return toPin(_obj);\n\n          case 116:\n            _iteratorAbruptCompletion2 = false;\n            _context.next = 110;\n            break;\n\n          case 119:\n            _context.next = 125;\n            break;\n\n          case 121:\n            _context.prev = 121;\n            _context.t3 = _context[\"catch\"](108);\n            _didIteratorError2 = true;\n            _iteratorError2 = _context.t3;\n\n          case 125:\n            _context.prev = 125;\n            _context.prev = 126;\n\n            if (!(_iteratorAbruptCompletion2 && _iterator2.return != null)) {\n              _context.next = 130;\n              break;\n            }\n\n            _context.next = 130;\n            return _awaitAsyncGenerator(_iterator2.return());\n\n          case 130:\n            _context.prev = 130;\n\n            if (!_didIteratorError2) {\n              _context.next = 133;\n              break;\n            }\n\n            throw _iteratorError2;\n\n          case 133:\n            return _context.finish(130);\n\n          case 134:\n            return _context.finish(125);\n\n          case 135:\n            return _context.abrupt(\"return\");\n\n          case 136:\n            throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n\n          case 137:\n            throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n\n          case 138:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[24, 34, 37, 40], [45, 55, 58, 61], [75, 88, 92, 102], [93,, 97, 101], [108, 121, 125, 135], [126,, 130, 134]]);\n  }));\n  return _normaliseInput.apply(this, arguments);\n}\n\nfunction toPin(input) {\n  var path = input.cid || \"\".concat(input.path);\n\n  if (!path) {\n    throw errCode(new Error('Unexpected input: Please path either a CID or an IPFS path'), 'ERR_UNEXPECTED_INPUT');\n  }\n\n  var pin = {\n    path: path,\n    recursive: input.recursive !== false\n  };\n\n  if (input.metadata != null) {\n    pin.metadata = input.metadata;\n  }\n\n  return pin;\n}","map":{"version":3,"sources":["/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/ipfs-core-utils/esm/src/pins/normalise-input.js"],"names":["errCode","CID","normaliseInput","input","undefined","Error","cid","asCID","toPin","String","path","Symbol","iterator","first","next","done","value","obj","asyncIterator","pin","recursive","metadata"],"mappings":"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","sourcesContent":["import errCode from 'err-code';\nimport { CID } from 'multiformats/cid';\nexport async function* normaliseInput(input) {\n  if (input === null || input === undefined) {\n    throw errCode(new Error(`Unexpected input: ${ input }`), 'ERR_UNEXPECTED_INPUT');\n  }\n  const cid = CID.asCID(input);\n  if (cid) {\n    yield toPin({ cid });\n    return;\n  }\n  if (input instanceof String || typeof input === 'string') {\n    yield toPin({ path: input });\n    return;\n  }\n  if (input.cid != null || input.path != null) {\n    return yield toPin(input);\n  }\n  if (Symbol.iterator in input) {\n    const iterator = input[Symbol.iterator]();\n    const first = iterator.next();\n    if (first.done)\n      return iterator;\n    if (CID.asCID(first.value) || first.value instanceof String || typeof first.value === 'string') {\n      yield toPin({ cid: first.value });\n      for (const cid of iterator) {\n        yield toPin({ cid });\n      }\n      return;\n    }\n    if (first.value.cid != null || first.value.path != null) {\n      yield toPin(first.value);\n      for (const obj of iterator) {\n        yield toPin(obj);\n      }\n      return;\n    }\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n  }\n  if (Symbol.asyncIterator in input) {\n    const iterator = input[Symbol.asyncIterator]();\n    const first = await iterator.next();\n    if (first.done)\n      return iterator;\n    if (CID.asCID(first.value) || first.value instanceof String || typeof first.value === 'string') {\n      yield toPin({ cid: first.value });\n      for await (const cid of iterator) {\n        yield toPin({ cid });\n      }\n      return;\n    }\n    if (first.value.cid != null || first.value.path != null) {\n      yield toPin(first.value);\n      for await (const obj of iterator) {\n        yield toPin(obj);\n      }\n      return;\n    }\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n  }\n  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n}\nfunction toPin(input) {\n  const path = input.cid || `${ input.path }`;\n  if (!path) {\n    throw errCode(new Error('Unexpected input: Please path either a CID or an IPFS path'), 'ERR_UNEXPECTED_INPUT');\n  }\n  const pin = {\n    path,\n    recursive: input.recursive !== false\n  };\n  if (input.metadata != null) {\n    pin.metadata = input.metadata;\n  }\n  return pin;\n}"]},"metadata":{},"sourceType":"module"}