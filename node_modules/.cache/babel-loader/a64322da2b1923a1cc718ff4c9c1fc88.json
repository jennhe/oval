{"ast":null,"code":"import _asyncToGenerator from \"/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _createForOfIteratorHelper from \"/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _regeneratorRuntime from \"/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/@babel/runtime/regenerator/index.js\";\n\nvar LOAD_BASE = function LOAD_BASE(name) {\n  return Promise.reject(new Error(\"No base found for \\\"\".concat(name, \"\\\"\")));\n};\n\nexport var Multibases = /*#__PURE__*/function () {\n  function Multibases(options) {\n    _classCallCheck(this, Multibases);\n\n    this._basesByName = {};\n    this._basesByPrefix = {};\n    this._loadBase = options.loadBase || LOAD_BASE;\n\n    var _iterator = _createForOfIteratorHelper(options.bases),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var base = _step.value;\n        this.addBase(base);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  _createClass(Multibases, [{\n    key: \"addBase\",\n    value: function addBase(base) {\n      if (this._basesByName[base.name] || this._basesByPrefix[base.prefix]) {\n        throw new Error(\"Codec already exists for codec \\\"\".concat(base.name, \"\\\"\"));\n      }\n\n      this._basesByName[base.name] = base;\n      this._basesByPrefix[base.prefix] = base;\n    }\n  }, {\n    key: \"removeBase\",\n    value: function removeBase(base) {\n      delete this._basesByName[base.name];\n      delete this._basesByPrefix[base.prefix];\n    }\n  }, {\n    key: \"getBase\",\n    value: function () {\n      var _getBase = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(nameOrPrefix) {\n        var base;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this._basesByName[nameOrPrefix]) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", this._basesByName[nameOrPrefix]);\n\n              case 2:\n                if (!this._basesByPrefix[nameOrPrefix]) {\n                  _context.next = 4;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", this._basesByPrefix[nameOrPrefix]);\n\n              case 4:\n                _context.next = 6;\n                return this._loadBase(nameOrPrefix);\n\n              case 6:\n                base = _context.sent;\n\n                if (this._basesByName[base.name] == null && this._basesByPrefix[base.prefix] == null) {\n                  this.addBase(base);\n                }\n\n                return _context.abrupt(\"return\", base);\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getBase(_x) {\n        return _getBase.apply(this, arguments);\n      }\n\n      return getBase;\n    }()\n  }, {\n    key: \"listBases\",\n    value: function listBases() {\n      return Object.values(this._basesByName);\n    }\n  }]);\n\n  return Multibases;\n}();","map":{"version":3,"sources":["/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/ipfs-core-utils/esm/src/multibases.js"],"names":["LOAD_BASE","name","Promise","reject","Error","Multibases","options","_basesByName","_basesByPrefix","_loadBase","loadBase","bases","base","addBase","prefix","nameOrPrefix","Object","values"],"mappings":";;;;;;AAAA,IAAMA,SAAS,GAAG,SAAZA,SAAY,CAAAC,IAAI;AAAA,SAAIC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,+BAAiCH,IAAjC,QAAf,CAAJ;AAAA,CAAtB;;AACA,WAAaI,UAAb;AACE,sBAAYC,OAAZ,EAAqB;AAAA;;AACnB,SAAKC,YAAL,GAAoB,EAApB;AACA,SAAKC,cAAL,GAAsB,EAAtB;AACA,SAAKC,SAAL,GAAiBH,OAAO,CAACI,QAAR,IAAoBV,SAArC;;AAHmB,+CAIAM,OAAO,CAACK,KAJR;AAAA;;AAAA;AAInB,0DAAkC;AAAA,YAAvBC,IAAuB;AAChC,aAAKC,OAAL,CAAaD,IAAb;AACD;AANkB;AAAA;AAAA;AAAA;AAAA;AAOpB;;AARH;AAAA;AAAA,WASE,iBAAQA,IAAR,EAAc;AACZ,UAAI,KAAKL,YAAL,CAAkBK,IAAI,CAACX,IAAvB,KAAgC,KAAKO,cAAL,CAAoBI,IAAI,CAACE,MAAzB,CAApC,EAAsE;AACpE,cAAM,IAAIV,KAAJ,4CAA8CQ,IAAI,CAACX,IAAnD,QAAN;AACD;;AACD,WAAKM,YAAL,CAAkBK,IAAI,CAACX,IAAvB,IAA+BW,IAA/B;AACA,WAAKJ,cAAL,CAAoBI,IAAI,CAACE,MAAzB,IAAmCF,IAAnC;AACD;AAfH;AAAA;AAAA,WAgBE,oBAAWA,IAAX,EAAiB;AACf,aAAO,KAAKL,YAAL,CAAkBK,IAAI,CAACX,IAAvB,CAAP;AACA,aAAO,KAAKO,cAAL,CAAoBI,IAAI,CAACE,MAAzB,CAAP;AACD;AAnBH;AAAA;AAAA;AAAA,8EAoBE,iBAAcC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACM,KAAKR,YAAL,CAAkBQ,YAAlB,CADN;AAAA;AAAA;AAAA;;AAAA,iDAEW,KAAKR,YAAL,CAAkBQ,YAAlB,CAFX;;AAAA;AAAA,qBAIM,KAAKP,cAAL,CAAoBO,YAApB,CAJN;AAAA;AAAA;AAAA;;AAAA,iDAKW,KAAKP,cAAL,CAAoBO,YAApB,CALX;;AAAA;AAAA;AAAA,uBAOqB,KAAKN,SAAL,CAAeM,YAAf,CAPrB;;AAAA;AAOQH,gBAAAA,IAPR;;AAQE,oBAAI,KAAKL,YAAL,CAAkBK,IAAI,CAACX,IAAvB,KAAgC,IAAhC,IAAwC,KAAKO,cAAL,CAAoBI,IAAI,CAACE,MAAzB,KAAoC,IAAhF,EAAsF;AACpF,uBAAKD,OAAL,CAAaD,IAAb;AACD;;AAVH,iDAWSA,IAXT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OApBF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,WAiCE,qBAAY;AACV,aAAOI,MAAM,CAACC,MAAP,CAAc,KAAKV,YAAnB,CAAP;AACD;AAnCH;;AAAA;AAAA","sourcesContent":["const LOAD_BASE = name => Promise.reject(new Error(`No base found for \"${ name }\"`));\nexport class Multibases {\n  constructor(options) {\n    this._basesByName = {};\n    this._basesByPrefix = {};\n    this._loadBase = options.loadBase || LOAD_BASE;\n    for (const base of options.bases) {\n      this.addBase(base);\n    }\n  }\n  addBase(base) {\n    if (this._basesByName[base.name] || this._basesByPrefix[base.prefix]) {\n      throw new Error(`Codec already exists for codec \"${ base.name }\"`);\n    }\n    this._basesByName[base.name] = base;\n    this._basesByPrefix[base.prefix] = base;\n  }\n  removeBase(base) {\n    delete this._basesByName[base.name];\n    delete this._basesByPrefix[base.prefix];\n  }\n  async getBase(nameOrPrefix) {\n    if (this._basesByName[nameOrPrefix]) {\n      return this._basesByName[nameOrPrefix];\n    }\n    if (this._basesByPrefix[nameOrPrefix]) {\n      return this._basesByPrefix[nameOrPrefix];\n    }\n    const base = await this._loadBase(nameOrPrefix);\n    if (this._basesByName[base.name] == null && this._basesByPrefix[base.prefix] == null) {\n      this.addBase(base);\n    }\n    return base;\n  }\n  listBases() {\n    return Object.values(this._basesByName);\n  }\n}"]},"metadata":{},"sourceType":"module"}