{"ast":null,"code":"import _objectSpread from \"/Users/jenniferhe/Documents/GitHub/oval/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/Users/jenniferhe/Documents/GitHub/oval/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/jenniferhe/Documents/GitHub/oval/node_modules/@babel/runtime/regenerator/index.js\";\nimport { CID } from 'multiformats/cid';\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { abortSignal } from '../lib/abort-signal.js';\nexport var createPut = configure(function (api) {\n  function put(_x) {\n    return _put.apply(this, arguments);\n  }\n\n  function _put() {\n    _put = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {\n      var options,\n          controller,\n          signal,\n          res,\n          response,\n          _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              controller = new AbortController();\n              signal = abortSignal(controller.signal, options.signal);\n              _context.prev = 3;\n              _context.t0 = api;\n              _context.t1 = _objectSpread;\n              _context.t2 = {\n                signal: signal,\n                searchParams: toUrlSearchParams(options)\n              };\n              _context.next = 9;\n              return multipartRequest([data], controller, options.headers);\n\n            case 9:\n              _context.t3 = _context.sent;\n              _context.t4 = (0, _context.t1)(_context.t2, _context.t3);\n              _context.next = 13;\n              return _context.t0.post.call(_context.t0, 'block/put', _context.t4);\n\n            case 13:\n              response = _context.sent;\n              _context.next = 16;\n              return response.json();\n\n            case 16:\n              res = _context.sent;\n              _context.next = 28;\n              break;\n\n            case 19:\n              _context.prev = 19;\n              _context.t5 = _context[\"catch\"](3);\n\n              if (!(options.format === 'dag-pb')) {\n                _context.next = 25;\n                break;\n              }\n\n              return _context.abrupt(\"return\", put(data, _objectSpread(_objectSpread({}, options), {}, {\n                format: 'protobuf'\n              })));\n\n            case 25:\n              if (!(options.format === 'dag-cbor')) {\n                _context.next = 27;\n                break;\n              }\n\n              return _context.abrupt(\"return\", put(data, _objectSpread(_objectSpread({}, options), {}, {\n                format: 'cbor'\n              })));\n\n            case 27:\n              throw _context.t5;\n\n            case 28:\n              return _context.abrupt(\"return\", CID.parse(res.Key));\n\n            case 29:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3, 19]]);\n    }));\n    return _put.apply(this, arguments);\n  }\n\n  return put;\n});","map":{"version":3,"sources":["/Users/jenniferhe/Documents/GitHub/oval/node_modules/ipfs-http-client/esm/src/block/put.js"],"names":["CID","multipartRequest","configure","toUrlSearchParams","abortSignal","createPut","api","put","data","options","controller","AbortController","signal","searchParams","headers","post","response","json","res","format","parse","Key"],"mappings":";;;AAAA,SAASA,GAAT,QAAoB,kBAApB;AACA,SAASC,gBAAT,QAAiC,mCAAjC;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,OAAO,IAAMC,SAAS,GAAGH,SAAS,CAAC,UAAAI,GAAG,EAAI;AAAA,WACzBC,GADyB;AAAA;AAAA;;AAAA;AAAA,oEACxC,iBAAmBC,IAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyBC,cAAAA,OAAzB,2DAAmC,EAAnC;AACQC,cAAAA,UADR,GACqB,IAAIC,eAAJ,EADrB;AAEQC,cAAAA,MAFR,GAEiBR,WAAW,CAACM,UAAU,CAACE,MAAZ,EAAoBH,OAAO,CAACG,MAA5B,CAF5B;AAAA;AAAA,4BAK2BN,GAL3B;AAAA;AAAA;AAMMM,gBAAAA,MAAM,EAAEA,MANd;AAOMC,gBAAAA,YAAY,EAAEV,iBAAiB,CAACM,OAAD;AAPrC;AAAA;AAAA,qBAQeR,gBAAgB,CAAC,CAACO,IAAD,CAAD,EAASE,UAAT,EAAqBD,OAAO,CAACK,OAA7B,CAR/B;;AAAA;AAAA;AAAA;AAAA;AAAA,iCAK+BC,IAL/B,mBAKoC,WALpC;;AAAA;AAKUC,cAAAA,QALV;AAAA;AAAA,qBAUgBA,QAAQ,CAACC,IAAT,EAVhB;;AAAA;AAUIC,cAAAA,GAVJ;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA,oBAYQT,OAAO,CAACU,MAAR,KAAmB,QAZ3B;AAAA;AAAA;AAAA;;AAAA,+CAaaZ,GAAG,CAACC,IAAD,kCACLC,OADK;AAERU,gBAAAA,MAAM,EAAE;AAFA,iBAbhB;;AAAA;AAAA,oBAiBeV,OAAO,CAACU,MAAR,KAAmB,UAjBlC;AAAA;AAAA;AAAA;;AAAA,+CAkBaZ,GAAG,CAACC,IAAD,kCACLC,OADK;AAERU,gBAAAA,MAAM,EAAE;AAFA,iBAlBhB;;AAAA;AAAA;;AAAA;AAAA,+CAyBSnB,GAAG,CAACoB,KAAJ,CAAUF,GAAG,CAACG,GAAd,CAzBT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADwC;AAAA;AAAA;;AA4BxC,SAAOd,GAAP;AACD,CA7BiC,CAA3B","sourcesContent":["import { CID } from 'multiformats/cid';\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { abortSignal } from '../lib/abort-signal.js';\nexport const createPut = configure(api => {\n  async function put(data, options = {}) {\n    const controller = new AbortController();\n    const signal = abortSignal(controller.signal, options.signal);\n    let res;\n    try {\n      const response = await api.post('block/put', {\n        signal: signal,\n        searchParams: toUrlSearchParams(options),\n        ...await multipartRequest([data], controller, options.headers)\n      });\n      res = await response.json();\n    } catch (err) {\n      if (options.format === 'dag-pb') {\n        return put(data, {\n          ...options,\n          format: 'protobuf'\n        });\n      } else if (options.format === 'dag-cbor') {\n        return put(data, {\n          ...options,\n          format: 'cbor'\n        });\n      }\n      throw err;\n    }\n    return CID.parse(res.Key);\n  }\n  return put;\n});"]},"metadata":{},"sourceType":"module"}