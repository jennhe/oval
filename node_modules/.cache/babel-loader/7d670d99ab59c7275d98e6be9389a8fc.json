{"ast":null,"code":"import _objectSpread from \"/Users/jenniferhe/Documents/GitHub/oval/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/Users/jenniferhe/Documents/GitHub/oval/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/jenniferhe/Documents/GitHub/oval/node_modules/@babel/runtime/regenerator/index.js\";\nimport { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport var createResolve = configure(function (api) {\n  var resolve = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ipfsPath) {\n      var options,\n          res,\n          data,\n          _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              _context.next = 3;\n              return api.post('dag/resolve', {\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: \"\".concat(ipfsPath).concat(options.path ? \"/\".concat(options.path).replace(/\\/[/]+/g, '/') : '')\n                }, options)),\n                headers: options.headers\n              });\n\n            case 3:\n              res = _context.sent;\n              _context.next = 6;\n              return res.json();\n\n            case 6:\n              data = _context.sent;\n              return _context.abrupt(\"return\", {\n                cid: CID.parse(data.Cid['/']),\n                remainderPath: data.RemPath\n              });\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function resolve(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return resolve;\n});","map":{"version":3,"sources":["/Users/jenniferhe/Documents/GitHub/oval/node_modules/ipfs-http-client/esm/src/dag/resolve.js"],"names":["CID","configure","toUrlSearchParams","createResolve","api","resolve","ipfsPath","options","post","signal","searchParams","arg","path","replace","headers","res","json","data","cid","parse","Cid","remainderPath","RemPath"],"mappings":";;;AAAA,SAASA,GAAT,QAAoB,kBAApB;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,OAAO,IAAMC,aAAa,GAAGF,SAAS,CAAC,UAAAG,GAAG,EAAI;AAC5C,MAAMC,OAAO;AAAA,wEAAG,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiBC,cAAAA,OAAjB,2DAA2B,EAA3B;AAAA;AAAA,qBACIH,GAAG,CAACI,IAAJ,CAAS,aAAT,EAAwB;AACxCC,gBAAAA,MAAM,EAAEF,OAAO,CAACE,MADwB;AAExCC,gBAAAA,YAAY,EAAER,iBAAiB;AAC7BS,kBAAAA,GAAG,YAAML,QAAN,SAAmBC,OAAO,CAACK,IAAR,GAAe,WAAKL,OAAO,CAACK,IAAb,EAAqBC,OAArB,CAA6B,SAA7B,EAAwC,GAAxC,CAAf,GAA8D,EAAjF;AAD0B,mBAE1BN,OAF0B,EAFS;AAMxCO,gBAAAA,OAAO,EAAEP,OAAO,CAACO;AANuB,eAAxB,CADJ;;AAAA;AACRC,cAAAA,GADQ;AAAA;AAAA,qBASKA,GAAG,CAACC,IAAJ,EATL;;AAAA;AASRC,cAAAA,IATQ;AAAA,+CAUP;AACLC,gBAAAA,GAAG,EAAElB,GAAG,CAACmB,KAAJ,CAAUF,IAAI,CAACG,GAAL,CAAS,GAAT,CAAV,CADA;AAELC,gBAAAA,aAAa,EAAEJ,IAAI,CAACK;AAFf,eAVO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAPjB,OAAO;AAAA;AAAA;AAAA,KAAb;;AAeA,SAAOA,OAAP;AACD,CAjBqC,CAA/B","sourcesContent":["import { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport const createResolve = configure(api => {\n  const resolve = async (ipfsPath, options = {}) => {\n    const res = await api.post('dag/resolve', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${ ipfsPath }${ options.path ? `/${ options.path }`.replace(/\\/[/]+/g, '/') : '' }`,\n        ...options\n      }),\n      headers: options.headers\n    });\n    const data = await res.json();\n    return {\n      cid: CID.parse(data.Cid['/']),\n      remainderPath: data.RemPath\n    };\n  };\n  return resolve;\n});"]},"metadata":{},"sourceType":"module"}