{"ast":null,"code":"import _asyncToGenerator from \"/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _createForOfIteratorHelper from \"/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _regeneratorRuntime from \"/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/@babel/runtime/regenerator/index.js\";\n\nvar LOAD_CODEC = function LOAD_CODEC(codeOrName) {\n  return Promise.reject(new Error(\"No codec found for \\\"\".concat(codeOrName, \"\\\"\")));\n};\n\nexport var Multicodecs = /*#__PURE__*/function () {\n  function Multicodecs(options) {\n    _classCallCheck(this, Multicodecs);\n\n    this._codecsByName = {};\n    this._codecsByCode = {};\n    this._loadCodec = options.loadCodec || LOAD_CODEC;\n\n    var _iterator = _createForOfIteratorHelper(options.codecs),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var codec = _step.value;\n        this.addCodec(codec);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  _createClass(Multicodecs, [{\n    key: \"addCodec\",\n    value: function addCodec(codec) {\n      if (this._codecsByName[codec.name] || this._codecsByCode[codec.code]) {\n        throw new Error(\"Resolver already exists for codec \\\"\".concat(codec.name, \"\\\"\"));\n      }\n\n      this._codecsByName[codec.name] = codec;\n      this._codecsByCode[codec.code] = codec;\n    }\n  }, {\n    key: \"removeCodec\",\n    value: function removeCodec(codec) {\n      delete this._codecsByName[codec.name];\n      delete this._codecsByCode[codec.code];\n    }\n  }, {\n    key: \"getCodec\",\n    value: function () {\n      var _getCodec = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(code) {\n        var table, codec;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                table = typeof code === 'string' ? this._codecsByName : this._codecsByCode;\n\n                if (!table[code]) {\n                  _context.next = 3;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", table[code]);\n\n              case 3:\n                _context.next = 5;\n                return this._loadCodec(code);\n\n              case 5:\n                codec = _context.sent;\n\n                if (table[code] == null) {\n                  this.addCodec(codec);\n                }\n\n                return _context.abrupt(\"return\", codec);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getCodec(_x) {\n        return _getCodec.apply(this, arguments);\n      }\n\n      return getCodec;\n    }()\n  }, {\n    key: \"listCodecs\",\n    value: function listCodecs() {\n      return Object.values(this._codecsByName);\n    }\n  }]);\n\n  return Multicodecs;\n}();","map":{"version":3,"sources":["/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/ipfs-core-utils/esm/src/multicodecs.js"],"names":["LOAD_CODEC","codeOrName","Promise","reject","Error","Multicodecs","options","_codecsByName","_codecsByCode","_loadCodec","loadCodec","codecs","codec","addCodec","name","code","table","Object","values"],"mappings":";;;;;;AAAA,IAAMA,UAAU,GAAG,SAAbA,UAAa,CAAAC,UAAU;AAAA,SAAIC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,gCAAkCH,UAAlC,QAAf,CAAJ;AAAA,CAA7B;;AACA,WAAaI,WAAb;AACE,uBAAYC,OAAZ,EAAqB;AAAA;;AACnB,SAAKC,aAAL,GAAqB,EAArB;AACA,SAAKC,aAAL,GAAqB,EAArB;AACA,SAAKC,UAAL,GAAkBH,OAAO,CAACI,SAAR,IAAqBV,UAAvC;;AAHmB,+CAICM,OAAO,CAACK,MAJT;AAAA;;AAAA;AAInB,0DAAoC;AAAA,YAAzBC,KAAyB;AAClC,aAAKC,QAAL,CAAcD,KAAd;AACD;AANkB;AAAA;AAAA;AAAA;AAAA;AAOpB;;AARH;AAAA;AAAA,WASE,kBAASA,KAAT,EAAgB;AACd,UAAI,KAAKL,aAAL,CAAmBK,KAAK,CAACE,IAAzB,KAAkC,KAAKN,aAAL,CAAmBI,KAAK,CAACG,IAAzB,CAAtC,EAAsE;AACpE,cAAM,IAAIX,KAAJ,+CAAiDQ,KAAK,CAACE,IAAvD,QAAN;AACD;;AACD,WAAKP,aAAL,CAAmBK,KAAK,CAACE,IAAzB,IAAiCF,KAAjC;AACA,WAAKJ,aAAL,CAAmBI,KAAK,CAACG,IAAzB,IAAiCH,KAAjC;AACD;AAfH;AAAA;AAAA,WAgBE,qBAAYA,KAAZ,EAAmB;AACjB,aAAO,KAAKL,aAAL,CAAmBK,KAAK,CAACE,IAAzB,CAAP;AACA,aAAO,KAAKN,aAAL,CAAmBI,KAAK,CAACG,IAAzB,CAAP;AACD;AAnBH;AAAA;AAAA;AAAA,+EAoBE,iBAAeA,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACQC,gBAAAA,KADR,GACgB,OAAOD,IAAP,KAAgB,QAAhB,GAA2B,KAAKR,aAAhC,GAAgD,KAAKC,aADrE;;AAAA,qBAEMQ,KAAK,CAACD,IAAD,CAFX;AAAA;AAAA;AAAA;;AAAA,iDAGWC,KAAK,CAACD,IAAD,CAHhB;;AAAA;AAAA;AAAA,uBAKsB,KAAKN,UAAL,CAAgBM,IAAhB,CALtB;;AAAA;AAKQH,gBAAAA,KALR;;AAME,oBAAII,KAAK,CAACD,IAAD,CAAL,IAAe,IAAnB,EAAyB;AACvB,uBAAKF,QAAL,CAAcD,KAAd;AACD;;AARH,iDASSA,KATT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OApBF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,WA+BE,sBAAa;AACX,aAAOK,MAAM,CAACC,MAAP,CAAc,KAAKX,aAAnB,CAAP;AACD;AAjCH;;AAAA;AAAA","sourcesContent":["const LOAD_CODEC = codeOrName => Promise.reject(new Error(`No codec found for \"${ codeOrName }\"`));\nexport class Multicodecs {\n  constructor(options) {\n    this._codecsByName = {};\n    this._codecsByCode = {};\n    this._loadCodec = options.loadCodec || LOAD_CODEC;\n    for (const codec of options.codecs) {\n      this.addCodec(codec);\n    }\n  }\n  addCodec(codec) {\n    if (this._codecsByName[codec.name] || this._codecsByCode[codec.code]) {\n      throw new Error(`Resolver already exists for codec \"${ codec.name }\"`);\n    }\n    this._codecsByName[codec.name] = codec;\n    this._codecsByCode[codec.code] = codec;\n  }\n  removeCodec(codec) {\n    delete this._codecsByName[codec.name];\n    delete this._codecsByCode[codec.code];\n  }\n  async getCodec(code) {\n    const table = typeof code === 'string' ? this._codecsByName : this._codecsByCode;\n    if (table[code]) {\n      return table[code];\n    }\n    const codec = await this._loadCodec(code);\n    if (table[code] == null) {\n      this.addCodec(codec);\n    }\n    return codec;\n  }\n  listCodecs() {\n    return Object.values(this._codecsByName);\n  }\n}"]},"metadata":{},"sourceType":"module"}