{"ast":null,"code":"import _classCallCheck from \"/Users/jenniferhe/Documents/GitHub/oval/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/jenniferhe/Documents/GitHub/oval/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nexport var SubscriptionTracker = /*#__PURE__*/function () {\n  function SubscriptionTracker() {\n    _classCallCheck(this, SubscriptionTracker);\n\n    this._subs = new Map();\n  }\n\n  _createClass(SubscriptionTracker, [{\n    key: \"subscribe\",\n    value: function subscribe(topic, handler, signal) {\n      var _this = this;\n\n      var topicSubs = this._subs.get(topic) || [];\n\n      if (topicSubs.find(function (s) {\n        return s.handler === handler;\n      })) {\n        throw new Error(\"Already subscribed to \".concat(topic, \" with this handler\"));\n      }\n\n      var controller = new AbortController();\n\n      this._subs.set(topic, [{\n        handler: handler,\n        controller: controller\n      }].concat(topicSubs));\n\n      if (signal) {\n        signal.addEventListener('abort', function () {\n          return _this.unsubscribe(topic, handler);\n        });\n      }\n\n      return controller.signal;\n    }\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe(topic, handler) {\n      var subs = this._subs.get(topic) || [];\n      var unsubs;\n\n      if (handler) {\n        this._subs.set(topic, subs.filter(function (s) {\n          return s.handler !== handler;\n        }));\n\n        unsubs = subs.filter(function (s) {\n          return s.handler === handler;\n        });\n      } else {\n        this._subs.set(topic, []);\n\n        unsubs = subs;\n      }\n\n      if (!(this._subs.get(topic) || []).length) {\n        this._subs.delete(topic);\n      }\n\n      unsubs.forEach(function (s) {\n        return s.controller.abort();\n      });\n    }\n  }]);\n\n  return SubscriptionTracker;\n}();","map":{"version":3,"sources":["/Users/jenniferhe/Documents/GitHub/oval/node_modules/ipfs-http-client/esm/src/pubsub/subscription-tracker.js"],"names":["SubscriptionTracker","_subs","Map","topic","handler","signal","topicSubs","get","find","s","Error","controller","AbortController","set","concat","addEventListener","unsubscribe","subs","unsubs","filter","length","delete","forEach","abort"],"mappings":";;AAAA,WAAaA,mBAAb;AACE,iCAAc;AAAA;;AACZ,SAAKC,KAAL,GAAa,IAAIC,GAAJ,EAAb;AACD;;AAHH;AAAA;AAAA,WAIE,mBAAUC,KAAV,EAAiBC,OAAjB,EAA0BC,MAA1B,EAAkC;AAAA;;AAChC,UAAMC,SAAS,GAAG,KAAKL,KAAL,CAAWM,GAAX,CAAeJ,KAAf,KAAyB,EAA3C;;AACA,UAAIG,SAAS,CAACE,IAAV,CAAe,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACL,OAAF,KAAcA,OAAlB;AAAA,OAAhB,CAAJ,EAAgD;AAC9C,cAAM,IAAIM,KAAJ,iCAAoCP,KAApC,wBAAN;AACD;;AACD,UAAMQ,UAAU,GAAG,IAAIC,eAAJ,EAAnB;;AACA,WAAKX,KAAL,CAAWY,GAAX,CAAeV,KAAf,EAAsB,CAAC;AACnBC,QAAAA,OAAO,EAAPA,OADmB;AAEnBO,QAAAA,UAAU,EAAVA;AAFmB,OAAD,EAGjBG,MAHiB,CAGVR,SAHU,CAAtB;;AAIA,UAAID,MAAJ,EAAY;AACVA,QAAAA,MAAM,CAACU,gBAAP,CAAwB,OAAxB,EAAiC;AAAA,iBAAM,KAAI,CAACC,WAAL,CAAiBb,KAAjB,EAAwBC,OAAxB,CAAN;AAAA,SAAjC;AACD;;AACD,aAAOO,UAAU,CAACN,MAAlB;AACD;AAlBH;AAAA;AAAA,WAmBE,qBAAYF,KAAZ,EAAmBC,OAAnB,EAA4B;AAC1B,UAAMa,IAAI,GAAG,KAAKhB,KAAL,CAAWM,GAAX,CAAeJ,KAAf,KAAyB,EAAtC;AACA,UAAIe,MAAJ;;AACA,UAAId,OAAJ,EAAa;AACX,aAAKH,KAAL,CAAWY,GAAX,CAAeV,KAAf,EAAsBc,IAAI,CAACE,MAAL,CAAY,UAAAV,CAAC;AAAA,iBAAIA,CAAC,CAACL,OAAF,KAAcA,OAAlB;AAAA,SAAb,CAAtB;;AACAc,QAAAA,MAAM,GAAGD,IAAI,CAACE,MAAL,CAAY,UAAAV,CAAC;AAAA,iBAAIA,CAAC,CAACL,OAAF,KAAcA,OAAlB;AAAA,SAAb,CAAT;AACD,OAHD,MAGO;AACL,aAAKH,KAAL,CAAWY,GAAX,CAAeV,KAAf,EAAsB,EAAtB;;AACAe,QAAAA,MAAM,GAAGD,IAAT;AACD;;AACD,UAAI,CAAC,CAAC,KAAKhB,KAAL,CAAWM,GAAX,CAAeJ,KAAf,KAAyB,EAA1B,EAA8BiB,MAAnC,EAA2C;AACzC,aAAKnB,KAAL,CAAWoB,MAAX,CAAkBlB,KAAlB;AACD;;AACDe,MAAAA,MAAM,CAACI,OAAP,CAAe,UAAAb,CAAC;AAAA,eAAIA,CAAC,CAACE,UAAF,CAAaY,KAAb,EAAJ;AAAA,OAAhB;AACD;AAjCH;;AAAA;AAAA","sourcesContent":["export class SubscriptionTracker {\n  constructor() {\n    this._subs = new Map();\n  }\n  subscribe(topic, handler, signal) {\n    const topicSubs = this._subs.get(topic) || [];\n    if (topicSubs.find(s => s.handler === handler)) {\n      throw new Error(`Already subscribed to ${ topic } with this handler`);\n    }\n    const controller = new AbortController();\n    this._subs.set(topic, [{\n        handler,\n        controller\n      }].concat(topicSubs));\n    if (signal) {\n      signal.addEventListener('abort', () => this.unsubscribe(topic, handler));\n    }\n    return controller.signal;\n  }\n  unsubscribe(topic, handler) {\n    const subs = this._subs.get(topic) || [];\n    let unsubs;\n    if (handler) {\n      this._subs.set(topic, subs.filter(s => s.handler !== handler));\n      unsubs = subs.filter(s => s.handler === handler);\n    } else {\n      this._subs.set(topic, []);\n      unsubs = subs;\n    }\n    if (!(this._subs.get(topic) || []).length) {\n      this._subs.delete(topic);\n    }\n    unsubs.forEach(s => s.controller.abort());\n  }\n}"]},"metadata":{},"sourceType":"module"}