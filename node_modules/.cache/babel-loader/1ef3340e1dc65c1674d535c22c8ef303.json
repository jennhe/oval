{"ast":null,"code":"import _slicedToArray from \"/Users/jenniferhe/Documents/GitHub/oval/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/Users/jenniferhe/Documents/GitHub/oval/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/jenniferhe/Documents/GitHub/oval/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as varint from './varint.js';\nimport * as Digest from './hashes/digest.js';\nimport { base58btc } from './bases/base58.js';\nimport { base32 } from './bases/base32.js';\nimport { coerce } from './bytes.js';\nexport var CID = /*#__PURE__*/function (_Symbol$toStringTag, _Symbol$for) {\n  function CID(version, code, multihash, bytes) {\n    _classCallCheck(this, CID);\n\n    this.code = code;\n    this.version = version;\n    this.multihash = multihash;\n    this.bytes = bytes;\n    this.byteOffset = bytes.byteOffset;\n    this.byteLength = bytes.byteLength;\n    this.asCID = this;\n    this._baseCache = new Map();\n    Object.defineProperties(this, {\n      byteOffset: hidden,\n      byteLength: hidden,\n      code: readonly,\n      version: readonly,\n      multihash: readonly,\n      bytes: readonly,\n      _baseCache: hidden,\n      asCID: hidden\n    });\n  }\n\n  _createClass(CID, [{\n    key: \"toV0\",\n    value: function toV0() {\n      switch (this.version) {\n        case 0:\n          {\n            return this;\n          }\n\n        default:\n          {\n            var code = this.code,\n                multihash = this.multihash;\n\n            if (code !== DAG_PB_CODE) {\n              throw new Error('Cannot convert a non dag-pb CID to CIDv0');\n            }\n\n            if (multihash.code !== SHA_256_CODE) {\n              throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0');\n            }\n\n            return CID.createV0(multihash);\n          }\n      }\n    }\n  }, {\n    key: \"toV1\",\n    value: function toV1() {\n      switch (this.version) {\n        case 0:\n          {\n            var _this$multihash = this.multihash,\n                code = _this$multihash.code,\n                digest = _this$multihash.digest;\n            var multihash = Digest.create(code, digest);\n            return CID.createV1(this.code, multihash);\n          }\n\n        case 1:\n          {\n            return this;\n          }\n\n        default:\n          {\n            throw Error(\"Can not convert CID version \".concat(this.version, \" to version 0. This is a bug please report\"));\n          }\n      }\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      return other && this.code === other.code && this.version === other.version && Digest.equals(this.multihash, other.multihash);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString(base) {\n      var bytes = this.bytes,\n          version = this.version,\n          _baseCache = this._baseCache;\n\n      switch (version) {\n        case 0:\n          return toStringV0(bytes, _baseCache, base || base58btc.encoder);\n\n        default:\n          return toStringV1(bytes, _baseCache, base || base32.encoder);\n      }\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        code: this.code,\n        version: this.version,\n        hash: this.multihash.bytes\n      };\n    }\n  }, {\n    key: _Symbol$toStringTag,\n    get: function get() {\n      return 'CID';\n    }\n  }, {\n    key: _Symbol$for,\n    value: function value() {\n      return 'CID(' + this.toString() + ')';\n    }\n  }, {\n    key: \"toBaseEncodedString\",\n    get: function get() {\n      throw new Error('Deprecated, use .toString()');\n    }\n  }, {\n    key: \"codec\",\n    get: function get() {\n      throw new Error('\"codec\" property is deprecated, use integer \"code\" property instead');\n    }\n  }, {\n    key: \"buffer\",\n    get: function get() {\n      throw new Error('Deprecated .buffer property, use .bytes to get Uint8Array instead');\n    }\n  }, {\n    key: \"multibaseName\",\n    get: function get() {\n      throw new Error('\"multibaseName\" property is deprecated');\n    }\n  }, {\n    key: \"prefix\",\n    get: function get() {\n      throw new Error('\"prefix\" property is deprecated');\n    }\n  }], [{\n    key: \"isCID\",\n    value: function isCID(value) {\n      deprecate(/^0\\.0/, IS_CID_DEPRECATION);\n      return !!(value && (value[cidSymbol] || value.asCID === value));\n    }\n  }, {\n    key: \"asCID\",\n    value: function asCID(value) {\n      if (value instanceof CID) {\n        return value;\n      } else if (value != null && value.asCID === value) {\n        var _version = value.version,\n            code = value.code,\n            multihash = value.multihash,\n            bytes = value.bytes;\n        return new CID(_version, code, multihash, bytes || encodeCID(_version, code, multihash.bytes));\n      } else if (value != null && value[cidSymbol] === true) {\n        var _version2 = value.version,\n            _multihash = value.multihash,\n            _code = value.code;\n        var digest = Digest.decode(_multihash);\n        return CID.create(_version2, _code, digest);\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"create\",\n    value: function create(version, code, digest) {\n      if (typeof code !== 'number') {\n        throw new Error('String codecs are no longer supported');\n      }\n\n      switch (version) {\n        case 0:\n          {\n            if (code !== DAG_PB_CODE) {\n              throw new Error(\"Version 0 CID must use dag-pb (code: \".concat(DAG_PB_CODE, \") block encoding\"));\n            } else {\n              return new CID(version, code, digest, digest.bytes);\n            }\n          }\n\n        case 1:\n          {\n            var bytes = encodeCID(version, code, digest.bytes);\n            return new CID(version, code, digest, bytes);\n          }\n\n        default:\n          {\n            throw new Error('Invalid version');\n          }\n      }\n    }\n  }, {\n    key: \"createV0\",\n    value: function createV0(digest) {\n      return CID.create(0, DAG_PB_CODE, digest);\n    }\n  }, {\n    key: \"createV1\",\n    value: function createV1(code, digest) {\n      return CID.create(1, code, digest);\n    }\n  }, {\n    key: \"decode\",\n    value: function decode(bytes) {\n      var _CID$decodeFirst = CID.decodeFirst(bytes),\n          _CID$decodeFirst2 = _slicedToArray(_CID$decodeFirst, 2),\n          cid = _CID$decodeFirst2[0],\n          remainder = _CID$decodeFirst2[1];\n\n      if (remainder.length) {\n        throw new Error('Incorrect length');\n      }\n\n      return cid;\n    }\n  }, {\n    key: \"decodeFirst\",\n    value: function decodeFirst(bytes) {\n      var specs = CID.inspectBytes(bytes);\n      var prefixSize = specs.size - specs.multihashSize;\n      var multihashBytes = coerce(bytes.subarray(prefixSize, prefixSize + specs.multihashSize));\n\n      if (multihashBytes.byteLength !== specs.multihashSize) {\n        throw new Error('Incorrect length');\n      }\n\n      var digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);\n      var digest = new Digest.Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);\n      var cid = specs.version === 0 ? CID.createV0(digest) : CID.createV1(specs.codec, digest);\n      return [cid, bytes.subarray(specs.size)];\n    }\n  }, {\n    key: \"inspectBytes\",\n    value: function inspectBytes(initialBytes) {\n      var offset = 0;\n\n      var next = function next() {\n        var _varint$decode = varint.decode(initialBytes.subarray(offset)),\n            _varint$decode2 = _slicedToArray(_varint$decode, 2),\n            i = _varint$decode2[0],\n            length = _varint$decode2[1];\n\n        offset += length;\n        return i;\n      };\n\n      var version = next();\n      var codec = DAG_PB_CODE;\n\n      if (version === 18) {\n        version = 0;\n        offset = 0;\n      } else if (version === 1) {\n        codec = next();\n      }\n\n      if (version !== 0 && version !== 1) {\n        throw new RangeError(\"Invalid CID version \".concat(version));\n      }\n\n      var prefixSize = offset;\n      var multihashCode = next();\n      var digestSize = next();\n      var size = offset + digestSize;\n      var multihashSize = size - prefixSize;\n      return {\n        version: version,\n        codec: codec,\n        multihashCode: multihashCode,\n        digestSize: digestSize,\n        multihashSize: multihashSize,\n        size: size\n      };\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(source, base) {\n      var _parseCIDtoBytes = parseCIDtoBytes(source, base),\n          _parseCIDtoBytes2 = _slicedToArray(_parseCIDtoBytes, 2),\n          prefix = _parseCIDtoBytes2[0],\n          bytes = _parseCIDtoBytes2[1];\n\n      var cid = CID.decode(bytes);\n\n      cid._baseCache.set(prefix, source);\n\n      return cid;\n    }\n  }]);\n\n  return CID;\n}(Symbol.toStringTag, Symbol.for('nodejs.util.inspect.custom'));\n\nvar parseCIDtoBytes = function parseCIDtoBytes(source, base) {\n  switch (source[0]) {\n    case 'Q':\n      {\n        var decoder = base || base58btc;\n        return [base58btc.prefix, decoder.decode(\"\".concat(base58btc.prefix).concat(source))];\n      }\n\n    case base58btc.prefix:\n      {\n        var _decoder = base || base58btc;\n\n        return [base58btc.prefix, _decoder.decode(source)];\n      }\n\n    case base32.prefix:\n      {\n        var _decoder2 = base || base32;\n\n        return [base32.prefix, _decoder2.decode(source)];\n      }\n\n    default:\n      {\n        if (base == null) {\n          throw Error('To parse non base32 or base58btc encoded CID multibase decoder must be provided');\n        }\n\n        return [source[0], base.decode(source)];\n      }\n  }\n};\n\nvar toStringV0 = function toStringV0(bytes, cache, base) {\n  var prefix = base.prefix;\n\n  if (prefix !== base58btc.prefix) {\n    throw Error(\"Cannot string encode V0 in \".concat(base.name, \" encoding\"));\n  }\n\n  var cid = cache.get(prefix);\n\n  if (cid == null) {\n    var _cid = base.encode(bytes).slice(1);\n\n    cache.set(prefix, _cid);\n    return _cid;\n  } else {\n    return cid;\n  }\n};\n\nvar toStringV1 = function toStringV1(bytes, cache, base) {\n  var prefix = base.prefix;\n  var cid = cache.get(prefix);\n\n  if (cid == null) {\n    var _cid2 = base.encode(bytes);\n\n    cache.set(prefix, _cid2);\n    return _cid2;\n  } else {\n    return cid;\n  }\n};\n\nvar DAG_PB_CODE = 112;\nvar SHA_256_CODE = 18;\n\nvar encodeCID = function encodeCID(version, code, multihash) {\n  var codeOffset = varint.encodingLength(version);\n  var hashOffset = codeOffset + varint.encodingLength(code);\n  var bytes = new Uint8Array(hashOffset + multihash.byteLength);\n  varint.encodeTo(version, bytes, 0);\n  varint.encodeTo(code, bytes, codeOffset);\n  bytes.set(multihash, hashOffset);\n  return bytes;\n};\n\nvar cidSymbol = Symbol.for('@ipld/js-cid/CID');\nvar readonly = {\n  writable: false,\n  configurable: false,\n  enumerable: true\n};\nvar hidden = {\n  writable: false,\n  enumerable: false,\n  configurable: false\n};\nvar version = '0.0.0-dev';\n\nvar deprecate = function deprecate(range, message) {\n  if (range.test(version)) {\n    console.warn(message);\n  } else {\n    throw new Error(message);\n  }\n};\n\nvar IS_CID_DEPRECATION = \"CID.isCID(v) is deprecated and will be removed in the next major release.\\nFollowing code pattern:\\n\\nif (CID.isCID(value)) {\\n  doSomethingWithCID(value)\\n}\\n\\nIs replaced with:\\n\\nconst cid = CID.asCID(value)\\nif (cid) {\\n  // Make sure to use cid instead of value\\n  doSomethingWithCID(cid)\\n}\\n\";","map":{"version":3,"sources":["/Users/jenniferhe/Documents/GitHub/oval/node_modules/multiformats/esm/src/cid.js"],"names":["varint","Digest","base58btc","base32","coerce","CID","version","code","multihash","bytes","byteOffset","byteLength","asCID","_baseCache","Map","Object","defineProperties","hidden","readonly","DAG_PB_CODE","Error","SHA_256_CODE","createV0","digest","create","createV1","other","equals","base","toStringV0","encoder","toStringV1","hash","toString","value","deprecate","IS_CID_DEPRECATION","cidSymbol","encodeCID","decode","decodeFirst","cid","remainder","length","specs","inspectBytes","prefixSize","size","multihashSize","multihashBytes","subarray","digestBytes","digestSize","multihashCode","codec","initialBytes","offset","next","i","RangeError","source","parseCIDtoBytes","prefix","set","Symbol","toStringTag","for","decoder","cache","name","get","encode","slice","codeOffset","encodingLength","hashOffset","Uint8Array","encodeTo","writable","configurable","enumerable","range","message","test","console","warn"],"mappings":"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","sourcesContent":["import * as varint from './varint.js';\nimport * as Digest from './hashes/digest.js';\nimport { base58btc } from './bases/base58.js';\nimport { base32 } from './bases/base32.js';\nimport { coerce } from './bytes.js';\nexport class CID {\n  constructor(version, code, multihash, bytes) {\n    this.code = code;\n    this.version = version;\n    this.multihash = multihash;\n    this.bytes = bytes;\n    this.byteOffset = bytes.byteOffset;\n    this.byteLength = bytes.byteLength;\n    this.asCID = this;\n    this._baseCache = new Map();\n    Object.defineProperties(this, {\n      byteOffset: hidden,\n      byteLength: hidden,\n      code: readonly,\n      version: readonly,\n      multihash: readonly,\n      bytes: readonly,\n      _baseCache: hidden,\n      asCID: hidden\n    });\n  }\n  toV0() {\n    switch (this.version) {\n    case 0: {\n        return this;\n      }\n    default: {\n        const {code, multihash} = this;\n        if (code !== DAG_PB_CODE) {\n          throw new Error('Cannot convert a non dag-pb CID to CIDv0');\n        }\n        if (multihash.code !== SHA_256_CODE) {\n          throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0');\n        }\n        return CID.createV0(multihash);\n      }\n    }\n  }\n  toV1() {\n    switch (this.version) {\n    case 0: {\n        const {code, digest} = this.multihash;\n        const multihash = Digest.create(code, digest);\n        return CID.createV1(this.code, multihash);\n      }\n    case 1: {\n        return this;\n      }\n    default: {\n        throw Error(`Can not convert CID version ${ this.version } to version 0. This is a bug please report`);\n      }\n    }\n  }\n  equals(other) {\n    return other && this.code === other.code && this.version === other.version && Digest.equals(this.multihash, other.multihash);\n  }\n  toString(base) {\n    const {bytes, version, _baseCache} = this;\n    switch (version) {\n    case 0:\n      return toStringV0(bytes, _baseCache, base || base58btc.encoder);\n    default:\n      return toStringV1(bytes, _baseCache, base || base32.encoder);\n    }\n  }\n  toJSON() {\n    return {\n      code: this.code,\n      version: this.version,\n      hash: this.multihash.bytes\n    };\n  }\n  get [Symbol.toStringTag]() {\n    return 'CID';\n  }\n  [Symbol.for('nodejs.util.inspect.custom')]() {\n    return 'CID(' + this.toString() + ')';\n  }\n  static isCID(value) {\n    deprecate(/^0\\.0/, IS_CID_DEPRECATION);\n    return !!(value && (value[cidSymbol] || value.asCID === value));\n  }\n  get toBaseEncodedString() {\n    throw new Error('Deprecated, use .toString()');\n  }\n  get codec() {\n    throw new Error('\"codec\" property is deprecated, use integer \"code\" property instead');\n  }\n  get buffer() {\n    throw new Error('Deprecated .buffer property, use .bytes to get Uint8Array instead');\n  }\n  get multibaseName() {\n    throw new Error('\"multibaseName\" property is deprecated');\n  }\n  get prefix() {\n    throw new Error('\"prefix\" property is deprecated');\n  }\n  static asCID(value) {\n    if (value instanceof CID) {\n      return value;\n    } else if (value != null && value.asCID === value) {\n      const {version, code, multihash, bytes} = value;\n      return new CID(version, code, multihash, bytes || encodeCID(version, code, multihash.bytes));\n    } else if (value != null && value[cidSymbol] === true) {\n      const {version, multihash, code} = value;\n      const digest = Digest.decode(multihash);\n      return CID.create(version, code, digest);\n    } else {\n      return null;\n    }\n  }\n  static create(version, code, digest) {\n    if (typeof code !== 'number') {\n      throw new Error('String codecs are no longer supported');\n    }\n    switch (version) {\n    case 0: {\n        if (code !== DAG_PB_CODE) {\n          throw new Error(`Version 0 CID must use dag-pb (code: ${ DAG_PB_CODE }) block encoding`);\n        } else {\n          return new CID(version, code, digest, digest.bytes);\n        }\n      }\n    case 1: {\n        const bytes = encodeCID(version, code, digest.bytes);\n        return new CID(version, code, digest, bytes);\n      }\n    default: {\n        throw new Error('Invalid version');\n      }\n    }\n  }\n  static createV0(digest) {\n    return CID.create(0, DAG_PB_CODE, digest);\n  }\n  static createV1(code, digest) {\n    return CID.create(1, code, digest);\n  }\n  static decode(bytes) {\n    const [cid, remainder] = CID.decodeFirst(bytes);\n    if (remainder.length) {\n      throw new Error('Incorrect length');\n    }\n    return cid;\n  }\n  static decodeFirst(bytes) {\n    const specs = CID.inspectBytes(bytes);\n    const prefixSize = specs.size - specs.multihashSize;\n    const multihashBytes = coerce(bytes.subarray(prefixSize, prefixSize + specs.multihashSize));\n    if (multihashBytes.byteLength !== specs.multihashSize) {\n      throw new Error('Incorrect length');\n    }\n    const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);\n    const digest = new Digest.Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);\n    const cid = specs.version === 0 ? CID.createV0(digest) : CID.createV1(specs.codec, digest);\n    return [\n      cid,\n      bytes.subarray(specs.size)\n    ];\n  }\n  static inspectBytes(initialBytes) {\n    let offset = 0;\n    const next = () => {\n      const [i, length] = varint.decode(initialBytes.subarray(offset));\n      offset += length;\n      return i;\n    };\n    let version = next();\n    let codec = DAG_PB_CODE;\n    if (version === 18) {\n      version = 0;\n      offset = 0;\n    } else if (version === 1) {\n      codec = next();\n    }\n    if (version !== 0 && version !== 1) {\n      throw new RangeError(`Invalid CID version ${ version }`);\n    }\n    const prefixSize = offset;\n    const multihashCode = next();\n    const digestSize = next();\n    const size = offset + digestSize;\n    const multihashSize = size - prefixSize;\n    return {\n      version,\n      codec,\n      multihashCode,\n      digestSize,\n      multihashSize,\n      size\n    };\n  }\n  static parse(source, base) {\n    const [prefix, bytes] = parseCIDtoBytes(source, base);\n    const cid = CID.decode(bytes);\n    cid._baseCache.set(prefix, source);\n    return cid;\n  }\n}\nconst parseCIDtoBytes = (source, base) => {\n  switch (source[0]) {\n  case 'Q': {\n      const decoder = base || base58btc;\n      return [\n        base58btc.prefix,\n        decoder.decode(`${ base58btc.prefix }${ source }`)\n      ];\n    }\n  case base58btc.prefix: {\n      const decoder = base || base58btc;\n      return [\n        base58btc.prefix,\n        decoder.decode(source)\n      ];\n    }\n  case base32.prefix: {\n      const decoder = base || base32;\n      return [\n        base32.prefix,\n        decoder.decode(source)\n      ];\n    }\n  default: {\n      if (base == null) {\n        throw Error('To parse non base32 or base58btc encoded CID multibase decoder must be provided');\n      }\n      return [\n        source[0],\n        base.decode(source)\n      ];\n    }\n  }\n};\nconst toStringV0 = (bytes, cache, base) => {\n  const {prefix} = base;\n  if (prefix !== base58btc.prefix) {\n    throw Error(`Cannot string encode V0 in ${ base.name } encoding`);\n  }\n  const cid = cache.get(prefix);\n  if (cid == null) {\n    const cid = base.encode(bytes).slice(1);\n    cache.set(prefix, cid);\n    return cid;\n  } else {\n    return cid;\n  }\n};\nconst toStringV1 = (bytes, cache, base) => {\n  const {prefix} = base;\n  const cid = cache.get(prefix);\n  if (cid == null) {\n    const cid = base.encode(bytes);\n    cache.set(prefix, cid);\n    return cid;\n  } else {\n    return cid;\n  }\n};\nconst DAG_PB_CODE = 112;\nconst SHA_256_CODE = 18;\nconst encodeCID = (version, code, multihash) => {\n  const codeOffset = varint.encodingLength(version);\n  const hashOffset = codeOffset + varint.encodingLength(code);\n  const bytes = new Uint8Array(hashOffset + multihash.byteLength);\n  varint.encodeTo(version, bytes, 0);\n  varint.encodeTo(code, bytes, codeOffset);\n  bytes.set(multihash, hashOffset);\n  return bytes;\n};\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID');\nconst readonly = {\n  writable: false,\n  configurable: false,\n  enumerable: true\n};\nconst hidden = {\n  writable: false,\n  enumerable: false,\n  configurable: false\n};\nconst version = '0.0.0-dev';\nconst deprecate = (range, message) => {\n  if (range.test(version)) {\n    console.warn(message);\n  } else {\n    throw new Error(message);\n  }\n};\nconst IS_CID_DEPRECATION = `CID.isCID(v) is deprecated and will be removed in the next major release.\nFollowing code pattern:\n\nif (CID.isCID(value)) {\n  doSomethingWithCID(value)\n}\n\nIs replaced with:\n\nconst cid = CID.asCID(value)\nif (cid) {\n  // Make sure to use cid instead of value\n  doSomethingWithCID(cid)\n}\n`;"]},"metadata":{},"sourceType":"module"}