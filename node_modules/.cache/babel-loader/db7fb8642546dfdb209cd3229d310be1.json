{"ast":null,"code":"import _objectSpread from \"/Users/jenniferhe/Documents/GitHub/oval/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _wrapAsyncGenerator from \"/Users/jenniferhe/Documents/GitHub/oval/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _awaitAsyncGenerator from \"/Users/jenniferhe/Documents/GitHub/oval/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _asyncIterator from \"/Users/jenniferhe/Documents/GitHub/oval/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport _asyncGeneratorDelegate from \"/Users/jenniferhe/Documents/GitHub/oval/node_modules/@babel/runtime/helpers/esm/asyncGeneratorDelegate.js\";\nimport _regeneratorRuntime from \"/Users/jenniferhe/Documents/GitHub/oval/node_modules/@babel/runtime/regenerator/index.js\";\nimport { CID } from 'multiformats/cid';\nimport { configure } from './lib/configure.js';\nimport { toUrlSearchParams } from './lib/to-url-search-params.js';\nexport var createGet = configure(function (api) {\n  function get(_x) {\n    return _get.apply(this, arguments);\n  }\n\n  function _get() {\n    _get = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(path) {\n      var options,\n          opts,\n          res,\n          _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              opts = _objectSpread({\n                arg: \"\".concat(path instanceof Uint8Array ? CID.decode(path) : path)\n              }, options);\n\n              if (opts.compressionLevel) {\n                opts['compression-level'] = opts.compressionLevel;\n                delete opts.compressionLevel;\n              }\n\n              _context.next = 5;\n              return _awaitAsyncGenerator(api.post('get', {\n                signal: options.signal,\n                searchParams: toUrlSearchParams(opts),\n                headers: options.headers\n              }));\n\n            case 5:\n              res = _context.sent;\n              return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator(res.iterator()), _awaitAsyncGenerator), \"t0\", 7);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _get.apply(this, arguments);\n  }\n\n  return get;\n});","map":{"version":3,"sources":["/Users/jenniferhe/Documents/GitHub/oval/node_modules/ipfs-http-client/esm/src/get.js"],"names":["CID","configure","toUrlSearchParams","createGet","api","get","path","options","opts","arg","Uint8Array","decode","compressionLevel","post","signal","searchParams","headers","res","iterator"],"mappings":";;;;;;AAAA,SAASA,GAAT,QAAoB,kBAApB;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,SAASC,iBAAT,QAAkC,+BAAlC;AACA,OAAO,IAAMC,SAAS,GAAGF,SAAS,CAAC,UAAAG,GAAG,EAAI;AAAA,WACxBC,GADwB;AAAA;AAAA;;AAAA;AAAA,sEACxC,iBAAoBC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0BC,cAAAA,OAA1B,2DAAoC,EAApC;AACQC,cAAAA,IADR;AAEIC,gBAAAA,GAAG,YAAMH,IAAI,YAAYI,UAAhB,GAA6BV,GAAG,CAACW,MAAJ,CAAWL,IAAX,CAA7B,GAAgDA,IAAtD;AAFP,iBAGOC,OAHP;;AAKE,kBAAIC,IAAI,CAACI,gBAAT,EAA2B;AACzBJ,gBAAAA,IAAI,CAAC,mBAAD,CAAJ,GAA4BA,IAAI,CAACI,gBAAjC;AACA,uBAAOJ,IAAI,CAACI,gBAAZ;AACD;;AARH;AAAA,0CASoBR,GAAG,CAACS,IAAJ,CAAS,KAAT,EAAgB;AAChCC,gBAAAA,MAAM,EAAEP,OAAO,CAACO,MADgB;AAEhCC,gBAAAA,YAAY,EAAEb,iBAAiB,CAACM,IAAD,CAFC;AAGhCQ,gBAAAA,OAAO,EAAET,OAAO,CAACS;AAHe,eAAhB,CATpB;;AAAA;AASQC,cAAAA,GATR;AAcE,mFAAOA,GAAG,CAACC,QAAJ,EAAP;;AAdF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADwC;AAAA;AAAA;;AAiBxC,SAAOb,GAAP;AACD,CAlBiC,CAA3B","sourcesContent":["import { CID } from 'multiformats/cid';\nimport { configure } from './lib/configure.js';\nimport { toUrlSearchParams } from './lib/to-url-search-params.js';\nexport const createGet = configure(api => {\n  async function* get(path, options = {}) {\n    const opts = {\n      arg: `${ path instanceof Uint8Array ? CID.decode(path) : path }`,\n      ...options\n    };\n    if (opts.compressionLevel) {\n      opts['compression-level'] = opts.compressionLevel;\n      delete opts.compressionLevel;\n    }\n    const res = await api.post('get', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(opts),\n      headers: options.headers\n    });\n    yield* res.iterator();\n  }\n  return get;\n});"]},"metadata":{},"sourceType":"module"}