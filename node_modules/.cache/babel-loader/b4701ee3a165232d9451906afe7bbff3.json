{"ast":null,"code":"import _objectSpread from \"/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/@babel/runtime/regenerator/index.js\";\nimport { objectToCamel } from './lib/object-to-camel.js';\nimport { Multiaddr } from 'multiaddr';\nimport { configure } from './lib/configure.js';\nimport { toUrlSearchParams } from './lib/to-url-search-params.js';\nexport var createId = configure(function (api) {\n  function id() {\n    return _id.apply(this, arguments);\n  }\n\n  function _id() {\n    _id = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var options,\n          res,\n          data,\n          output,\n          _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n              _context.next = 3;\n              return api.post('id', {\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: options.peerId ? options.peerId.toString() : undefined\n                }, options)),\n                headers: options.headers\n              });\n\n            case 3:\n              res = _context.sent;\n              _context.next = 6;\n              return res.json();\n\n            case 6:\n              data = _context.sent;\n              output = _objectSpread({}, objectToCamel(data));\n\n              if (output.addresses) {\n                output.addresses = output.addresses.map(function (ma) {\n                  return new Multiaddr(ma);\n                });\n              }\n\n              return _context.abrupt(\"return\", output);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _id.apply(this, arguments);\n  }\n\n  return id;\n});","map":{"version":3,"sources":["/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/ipfs-http-client/esm/src/id.js"],"names":["objectToCamel","Multiaddr","configure","toUrlSearchParams","createId","api","id","options","post","signal","searchParams","arg","peerId","toString","undefined","headers","res","json","data","output","addresses","map","ma"],"mappings":";;;AAAA,SAASA,aAAT,QAA8B,0BAA9B;AACA,SAASC,SAAT,QAA0B,WAA1B;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,SAASC,iBAAT,QAAkC,+BAAlC;AACA,OAAO,IAAMC,QAAQ,GAAGF,SAAS,CAAC,UAAAG,GAAG,EAAI;AAAA,WACxBC,EADwB;AAAA;AAAA;;AAAA;AAAA,mEACvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkBC,cAAAA,OAAlB,2DAA4B,EAA5B;AAAA;AAAA,qBACoBF,GAAG,CAACG,IAAJ,CAAS,IAAT,EAAe;AAC/BC,gBAAAA,MAAM,EAAEF,OAAO,CAACE,MADe;AAE/BC,gBAAAA,YAAY,EAAEP,iBAAiB;AAC7BQ,kBAAAA,GAAG,EAAEJ,OAAO,CAACK,MAAR,GAAiBL,OAAO,CAACK,MAAR,CAAeC,QAAf,EAAjB,GAA6CC;AADrB,mBAE1BP,OAF0B,EAFA;AAM/BQ,gBAAAA,OAAO,EAAER,OAAO,CAACQ;AANc,eAAf,CADpB;;AAAA;AACQC,cAAAA,GADR;AAAA;AAAA,qBASqBA,GAAG,CAACC,IAAJ,EATrB;;AAAA;AASQC,cAAAA,IATR;AAUQC,cAAAA,MAVR,qBAUsBnB,aAAa,CAACkB,IAAD,CAVnC;;AAWE,kBAAIC,MAAM,CAACC,SAAX,EAAsB;AACpBD,gBAAAA,MAAM,CAACC,SAAP,GAAmBD,MAAM,CAACC,SAAP,CAAiBC,GAAjB,CAAqB,UAAAC,EAAE;AAAA,yBAAI,IAAIrB,SAAJ,CAAcqB,EAAd,CAAJ;AAAA,iBAAvB,CAAnB;AACD;;AAbH,+CAcSH,MAdT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADuC;AAAA;AAAA;;AAiBvC,SAAOb,EAAP;AACD,CAlBgC,CAA1B","sourcesContent":["import { objectToCamel } from './lib/object-to-camel.js';\nimport { Multiaddr } from 'multiaddr';\nimport { configure } from './lib/configure.js';\nimport { toUrlSearchParams } from './lib/to-url-search-params.js';\nexport const createId = configure(api => {\n  async function id(options = {}) {\n    const res = await api.post('id', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: options.peerId ? options.peerId.toString() : undefined,\n        ...options\n      }),\n      headers: options.headers\n    });\n    const data = await res.json();\n    const output = { ...objectToCamel(data) };\n    if (output.addresses) {\n      output.addresses = output.addresses.map(ma => new Multiaddr(ma));\n    }\n    return output;\n  }\n  return id;\n});"]},"metadata":{},"sourceType":"module"}