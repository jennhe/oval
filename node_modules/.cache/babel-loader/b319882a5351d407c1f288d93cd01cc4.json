{"ast":null,"code":"import _asyncToGenerator from \"/Users/jenniferhe/Documents/GitHub/oval/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _awaitAsyncGenerator from \"/Users/jenniferhe/Documents/GitHub/oval/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _wrapAsyncGenerator from \"/Users/jenniferhe/Documents/GitHub/oval/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _regeneratorRuntime from \"/Users/jenniferhe/Documents/GitHub/oval/node_modules/@babel/runtime/regenerator/index.js\";\nimport { CID } from 'multiformats/cid';\nimport errCode from 'err-code';\nexport function resolve(_x, _x2, _x3, _x4, _x5) {\n  return _resolve.apply(this, arguments);\n}\n\nfunction _resolve() {\n  _resolve = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(cid, path, codecs, getBlock, options) {\n    var load, parts, value, lastCid, key, _cid;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            load = /*#__PURE__*/function () {\n              var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(cid) {\n                var codec, block;\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        _context.next = 2;\n                        return codecs.getCodec(cid.code);\n\n                      case 2:\n                        codec = _context.sent;\n                        _context.next = 5;\n                        return getBlock(cid, options);\n\n                      case 5:\n                        block = _context.sent;\n                        return _context.abrupt(\"return\", codec.decode(block));\n\n                      case 7:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee);\n              }));\n\n              return function load(_x6) {\n                return _ref.apply(this, arguments);\n              };\n            }();\n\n            parts = path.split('/').filter(Boolean);\n            _context2.next = 4;\n            return _awaitAsyncGenerator(load(cid));\n\n          case 4:\n            value = _context2.sent;\n            lastCid = cid;\n\n          case 6:\n            if (!parts.length) {\n              _context2.next = 25;\n              break;\n            }\n\n            key = parts.shift();\n\n            if (key) {\n              _context2.next = 10;\n              break;\n            }\n\n            throw errCode(new Error(\"Could not resolve path \\\"\".concat(path, \"\\\"\")), 'ERR_INVALID_PATH');\n\n          case 10:\n            if (!Object.prototype.hasOwnProperty.call(value, key)) {\n              _context2.next = 16;\n              break;\n            }\n\n            value = value[key];\n            _context2.next = 14;\n            return {\n              value: value,\n              remainderPath: parts.join('/')\n            };\n\n          case 14:\n            _context2.next = 17;\n            break;\n\n          case 16:\n            throw errCode(new Error(\"no link named \\\"\".concat(key, \"\\\" under \").concat(lastCid)), 'ERR_NO_LINK');\n\n          case 17:\n            _cid = CID.asCID(value);\n\n            if (!_cid) {\n              _context2.next = 23;\n              break;\n            }\n\n            lastCid = _cid;\n            _context2.next = 22;\n            return _awaitAsyncGenerator(load(value));\n\n          case 22:\n            value = _context2.sent;\n\n          case 23:\n            _context2.next = 6;\n            break;\n\n          case 25:\n            _context2.next = 27;\n            return {\n              value: value,\n              remainderPath: ''\n            };\n\n          case 27:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _resolve.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/jenniferhe/Documents/GitHub/oval/node_modules/ipfs-http-client/esm/src/lib/resolve.js"],"names":["CID","errCode","resolve","cid","path","codecs","getBlock","options","load","getCodec","code","codec","block","decode","parts","split","filter","Boolean","value","lastCid","length","key","shift","Error","Object","prototype","hasOwnProperty","call","remainderPath","join","asCID"],"mappings":";;;;AAAA,SAASA,GAAT,QAAoB,kBAApB;AACA,OAAOC,OAAP,MAAoB,UAApB;AACA,gBAAuBC,OAAvB;AAAA;AAAA;;;wEAAO,kBAAwBC,GAAxB,EAA6BC,IAA7B,EAAmCC,MAAnC,EAA2CC,QAA3C,EAAqDC,OAArD;AAAA;;AAAA;AAAA;AAAA;AAAA;AACCC,YAAAA,IADD;AAAA,kFACQ,iBAAML,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACSE,MAAM,CAACI,QAAP,CAAgBN,GAAG,CAACO,IAApB,CADT;;AAAA;AACLC,wBAAAA,KADK;AAAA;AAAA,+BAESL,QAAQ,CAACH,GAAD,EAAMI,OAAN,CAFjB;;AAAA;AAELK,wBAAAA,KAFK;AAAA,yDAGJD,KAAK,CAACE,MAAN,CAAaD,KAAb,CAHI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADR;;AAAA,8BACCJ,IADD;AAAA;AAAA;AAAA;;AAMCM,YAAAA,KAND,GAMSV,IAAI,CAACW,KAAL,CAAW,GAAX,EAAgBC,MAAhB,CAAuBC,OAAvB,CANT;AAAA;AAAA,wCAOaT,IAAI,CAACL,GAAD,CAPjB;;AAAA;AAODe,YAAAA,KAPC;AAQDC,YAAAA,OARC,GAQShB,GART;;AAAA;AAAA,iBASEW,KAAK,CAACM,MATR;AAAA;AAAA;AAAA;;AAUGC,YAAAA,GAVH,GAUSP,KAAK,CAACQ,KAAN,EAVT;;AAAA,gBAWED,GAXF;AAAA;AAAA;AAAA;;AAAA,kBAYKpB,OAAO,CAAC,IAAIsB,KAAJ,oCAAsCnB,IAAtC,QAAD,EAAkD,kBAAlD,CAZZ;;AAAA;AAAA,iBAcCoB,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCT,KAArC,EAA4CG,GAA5C,CAdD;AAAA;AAAA;AAAA;;AAeDH,YAAAA,KAAK,GAAGA,KAAK,CAACG,GAAD,CAAb;AAfC;AAgBD,mBAAM;AACJH,cAAAA,KAAK,EAALA,KADI;AAEJU,cAAAA,aAAa,EAAEd,KAAK,CAACe,IAAN,CAAW,GAAX;AAFX,aAAN;;AAhBC;AAAA;AAAA;;AAAA;AAAA,kBAqBK5B,OAAO,CAAC,IAAIsB,KAAJ,2BAA6BF,GAA7B,sBAA6CF,OAA7C,EAAD,EAA2D,aAA3D,CArBZ;;AAAA;AAuBGhB,YAAAA,IAvBH,GAuBSH,GAAG,CAAC8B,KAAJ,CAAUZ,KAAV,CAvBT;;AAAA,iBAwBCf,IAxBD;AAAA;AAAA;AAAA;;AAyBDgB,YAAAA,OAAO,GAAGhB,IAAV;AAzBC;AAAA,wCA0BaK,IAAI,CAACU,KAAD,CA1BjB;;AAAA;AA0BDA,YAAAA,KA1BC;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA6BL,mBAAM;AACJA,cAAAA,KAAK,EAALA,KADI;AAEJU,cAAAA,aAAa,EAAE;AAFX,aAAN;;AA7BK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import { CID } from 'multiformats/cid';\nimport errCode from 'err-code';\nexport async function* resolve(cid, path, codecs, getBlock, options) {\n  const load = async cid => {\n    const codec = await codecs.getCodec(cid.code);\n    const block = await getBlock(cid, options);\n    return codec.decode(block);\n  };\n  const parts = path.split('/').filter(Boolean);\n  let value = await load(cid);\n  let lastCid = cid;\n  while (parts.length) {\n    const key = parts.shift();\n    if (!key) {\n      throw errCode(new Error(`Could not resolve path \"${ path }\"`), 'ERR_INVALID_PATH');\n    }\n    if (Object.prototype.hasOwnProperty.call(value, key)) {\n      value = value[key];\n      yield {\n        value,\n        remainderPath: parts.join('/')\n      };\n    } else {\n      throw errCode(new Error(`no link named \"${ key }\" under ${ lastCid }`), 'ERR_NO_LINK');\n    }\n    const cid = CID.asCID(value);\n    if (cid) {\n      lastCid = cid;\n      value = await load(value);\n    }\n  }\n  yield {\n    value,\n    remainderPath: ''\n  };\n}"]},"metadata":{},"sourceType":"module"}