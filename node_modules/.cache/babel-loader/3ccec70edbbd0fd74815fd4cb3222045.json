{"ast":null,"code":"import _createClass from \"/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _slicedToArray from \"/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { coerce, equals as equalBytes } from '../bytes.js';\nimport * as varint from '../varint.js';\nexport var create = function create(code, digest) {\n  var size = digest.byteLength;\n  var sizeOffset = varint.encodingLength(code);\n  var digestOffset = sizeOffset + varint.encodingLength(size);\n  var bytes = new Uint8Array(digestOffset + size);\n  varint.encodeTo(code, bytes, 0);\n  varint.encodeTo(size, bytes, sizeOffset);\n  bytes.set(digest, digestOffset);\n  return new Digest(code, size, digest, bytes);\n};\nexport var decode = function decode(multihash) {\n  var bytes = coerce(multihash);\n\n  var _varint$decode = varint.decode(bytes),\n      _varint$decode2 = _slicedToArray(_varint$decode, 2),\n      code = _varint$decode2[0],\n      sizeOffset = _varint$decode2[1];\n\n  var _varint$decode3 = varint.decode(bytes.subarray(sizeOffset)),\n      _varint$decode4 = _slicedToArray(_varint$decode3, 2),\n      size = _varint$decode4[0],\n      digestOffset = _varint$decode4[1];\n\n  var digest = bytes.subarray(sizeOffset + digestOffset);\n\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length');\n  }\n\n  return new Digest(code, size, digest, bytes);\n};\nexport var equals = function equals(a, b) {\n  if (a === b) {\n    return true;\n  } else {\n    return a.code === b.code && a.size === b.size && equalBytes(a.bytes, b.bytes);\n  }\n};\nexport var Digest = /*#__PURE__*/_createClass(function Digest(code, size, digest, bytes) {\n  _classCallCheck(this, Digest);\n\n  this.code = code;\n  this.size = size;\n  this.digest = digest;\n  this.bytes = bytes;\n});","map":{"version":3,"sources":["/Users/jenniferhe/Documents/GitHub/2022-Chia1/webapp/node_modules/multiformats/esm/src/hashes/digest.js"],"names":["coerce","equals","equalBytes","varint","create","code","digest","size","byteLength","sizeOffset","encodingLength","digestOffset","bytes","Uint8Array","encodeTo","set","Digest","decode","multihash","subarray","Error","a","b"],"mappings":";;;AAAA,SACEA,MADF,EAEEC,MAAM,IAAIC,UAFZ,QAGO,aAHP;AAIA,OAAO,KAAKC,MAAZ,MAAwB,cAAxB;AACA,OAAO,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,IAAD,EAAOC,MAAP,EAAkB;AACtC,MAAMC,IAAI,GAAGD,MAAM,CAACE,UAApB;AACA,MAAMC,UAAU,GAAGN,MAAM,CAACO,cAAP,CAAsBL,IAAtB,CAAnB;AACA,MAAMM,YAAY,GAAGF,UAAU,GAAGN,MAAM,CAACO,cAAP,CAAsBH,IAAtB,CAAlC;AACA,MAAMK,KAAK,GAAG,IAAIC,UAAJ,CAAeF,YAAY,GAAGJ,IAA9B,CAAd;AACAJ,EAAAA,MAAM,CAACW,QAAP,CAAgBT,IAAhB,EAAsBO,KAAtB,EAA6B,CAA7B;AACAT,EAAAA,MAAM,CAACW,QAAP,CAAgBP,IAAhB,EAAsBK,KAAtB,EAA6BH,UAA7B;AACAG,EAAAA,KAAK,CAACG,GAAN,CAAUT,MAAV,EAAkBK,YAAlB;AACA,SAAO,IAAIK,MAAJ,CAAWX,IAAX,EAAiBE,IAAjB,EAAuBD,MAAvB,EAA+BM,KAA/B,CAAP;AACD,CATM;AAUP,OAAO,IAAMK,MAAM,GAAG,SAATA,MAAS,CAAAC,SAAS,EAAI;AACjC,MAAMN,KAAK,GAAGZ,MAAM,CAACkB,SAAD,CAApB;;AACA,uBAA2Bf,MAAM,CAACc,MAAP,CAAcL,KAAd,CAA3B;AAAA;AAAA,MAAOP,IAAP;AAAA,MAAaI,UAAb;;AACA,wBAA6BN,MAAM,CAACc,MAAP,CAAcL,KAAK,CAACO,QAAN,CAAeV,UAAf,CAAd,CAA7B;AAAA;AAAA,MAAOF,IAAP;AAAA,MAAaI,YAAb;;AACA,MAAML,MAAM,GAAGM,KAAK,CAACO,QAAN,CAAeV,UAAU,GAAGE,YAA5B,CAAf;;AACA,MAAIL,MAAM,CAACE,UAAP,KAAsBD,IAA1B,EAAgC;AAC9B,UAAM,IAAIa,KAAJ,CAAU,kBAAV,CAAN;AACD;;AACD,SAAO,IAAIJ,MAAJ,CAAWX,IAAX,EAAiBE,IAAjB,EAAuBD,MAAvB,EAA+BM,KAA/B,CAAP;AACD,CATM;AAUP,OAAO,IAAMX,MAAM,GAAG,SAATA,MAAS,CAACoB,CAAD,EAAIC,CAAJ,EAAU;AAC9B,MAAID,CAAC,KAAKC,CAAV,EAAa;AACX,WAAO,IAAP;AACD,GAFD,MAEO;AACL,WAAOD,CAAC,CAAChB,IAAF,KAAWiB,CAAC,CAACjB,IAAb,IAAqBgB,CAAC,CAACd,IAAF,KAAWe,CAAC,CAACf,IAAlC,IAA0CL,UAAU,CAACmB,CAAC,CAACT,KAAH,EAAUU,CAAC,CAACV,KAAZ,CAA3D;AACD;AACF,CANM;AAOP,WAAaI,MAAb,6BACE,gBAAYX,IAAZ,EAAkBE,IAAlB,EAAwBD,MAAxB,EAAgCM,KAAhC,EAAuC;AAAA;;AACrC,OAAKP,IAAL,GAAYA,IAAZ;AACA,OAAKE,IAAL,GAAYA,IAAZ;AACA,OAAKD,MAAL,GAAcA,MAAd;AACA,OAAKM,KAAL,GAAaA,KAAb;AACD,CANH","sourcesContent":["import {\n  coerce,\n  equals as equalBytes\n} from '../bytes.js';\nimport * as varint from '../varint.js';\nexport const create = (code, digest) => {\n  const size = digest.byteLength;\n  const sizeOffset = varint.encodingLength(code);\n  const digestOffset = sizeOffset + varint.encodingLength(size);\n  const bytes = new Uint8Array(digestOffset + size);\n  varint.encodeTo(code, bytes, 0);\n  varint.encodeTo(size, bytes, sizeOffset);\n  bytes.set(digest, digestOffset);\n  return new Digest(code, size, digest, bytes);\n};\nexport const decode = multihash => {\n  const bytes = coerce(multihash);\n  const [code, sizeOffset] = varint.decode(bytes);\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset));\n  const digest = bytes.subarray(sizeOffset + digestOffset);\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length');\n  }\n  return new Digest(code, size, digest, bytes);\n};\nexport const equals = (a, b) => {\n  if (a === b) {\n    return true;\n  } else {\n    return a.code === b.code && a.size === b.size && equalBytes(a.bytes, b.bytes);\n  }\n};\nexport class Digest {\n  constructor(code, size, digest, bytes) {\n    this.code = code;\n    this.size = size;\n    this.digest = digest;\n    this.bytes = bytes;\n  }\n}"]},"metadata":{},"sourceType":"module"}