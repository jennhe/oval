{"ast":null,"code":"import _asyncToGenerator from \"/Users/jenniferhe/Documents/GitHub/oval/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/jenniferhe/Documents/GitHub/oval/node_modules/@babel/runtime/regenerator/index.js\";\nimport { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport var createStat = configure(function (api) {\n  function stat() {\n    return _stat.apply(this, arguments);\n  }\n\n  function _stat() {\n    _stat = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var options,\n          res,\n          _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n              _context.next = 3;\n              return api.post('bitswap/stat', {\n                searchParams: toUrlSearchParams(options),\n                signal: options.signal,\n                headers: options.headers\n              });\n\n            case 3:\n              res = _context.sent;\n              _context.t0 = toCoreInterface;\n              _context.next = 7;\n              return res.json();\n\n            case 7:\n              _context.t1 = _context.sent;\n              return _context.abrupt(\"return\", (0, _context.t0)(_context.t1));\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _stat.apply(this, arguments);\n  }\n\n  return stat;\n});\n\nfunction toCoreInterface(res) {\n  return {\n    provideBufLen: res.ProvideBufLen,\n    wantlist: (res.Wantlist || []).map(function (k) {\n      return CID.parse(k['/']);\n    }),\n    peers: res.Peers || [],\n    blocksReceived: BigInt(res.BlocksReceived),\n    dataReceived: BigInt(res.DataReceived),\n    blocksSent: BigInt(res.BlocksSent),\n    dataSent: BigInt(res.DataSent),\n    dupBlksReceived: BigInt(res.DupBlksReceived),\n    dupDataReceived: BigInt(res.DupDataReceived)\n  };\n}","map":{"version":3,"sources":["/Users/jenniferhe/Documents/GitHub/oval/node_modules/ipfs-http-client/esm/src/bitswap/stat.js"],"names":["CID","configure","toUrlSearchParams","createStat","api","stat","options","post","searchParams","signal","headers","res","toCoreInterface","json","provideBufLen","ProvideBufLen","wantlist","Wantlist","map","k","parse","peers","Peers","blocksReceived","BigInt","BlocksReceived","dataReceived","DataReceived","blocksSent","BlocksSent","dataSent","DataSent","dupBlksReceived","DupBlksReceived","dupDataReceived","DupDataReceived"],"mappings":";;AAAA,SAASA,GAAT,QAAoB,kBAApB;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,OAAO,IAAMC,UAAU,GAAGF,SAAS,CAAC,UAAAG,GAAG,EAAI;AAAA,WAC1BC,IAD0B;AAAA;AAAA;;AAAA;AAAA,qEACzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAoBC,cAAAA,OAApB,2DAA8B,EAA9B;AAAA;AAAA,qBACoBF,GAAG,CAACG,IAAJ,CAAS,cAAT,EAAyB;AACzCC,gBAAAA,YAAY,EAAEN,iBAAiB,CAACI,OAAD,CADU;AAEzCG,gBAAAA,MAAM,EAAEH,OAAO,CAACG,MAFyB;AAGzCC,gBAAAA,OAAO,EAAEJ,OAAO,CAACI;AAHwB,eAAzB,CADpB;;AAAA;AACQC,cAAAA,GADR;AAAA,4BAMSC,eANT;AAAA;AAAA,qBAM+BD,GAAG,CAACE,IAAJ,EAN/B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADyC;AAAA;AAAA;;AASzC,SAAOR,IAAP;AACD,CAVkC,CAA5B;;AAWP,SAASO,eAAT,CAAyBD,GAAzB,EAA8B;AAC5B,SAAO;AACLG,IAAAA,aAAa,EAAEH,GAAG,CAACI,aADd;AAELC,IAAAA,QAAQ,EAAE,CAACL,GAAG,CAACM,QAAJ,IAAgB,EAAjB,EAAqBC,GAArB,CAAyB,UAAAC,CAAC;AAAA,aAAInB,GAAG,CAACoB,KAAJ,CAAUD,CAAC,CAAC,GAAD,CAAX,CAAJ;AAAA,KAA1B,CAFL;AAGLE,IAAAA,KAAK,EAAEV,GAAG,CAACW,KAAJ,IAAa,EAHf;AAILC,IAAAA,cAAc,EAAEC,MAAM,CAACb,GAAG,CAACc,cAAL,CAJjB;AAKLC,IAAAA,YAAY,EAAEF,MAAM,CAACb,GAAG,CAACgB,YAAL,CALf;AAMLC,IAAAA,UAAU,EAAEJ,MAAM,CAACb,GAAG,CAACkB,UAAL,CANb;AAOLC,IAAAA,QAAQ,EAAEN,MAAM,CAACb,GAAG,CAACoB,QAAL,CAPX;AAQLC,IAAAA,eAAe,EAAER,MAAM,CAACb,GAAG,CAACsB,eAAL,CARlB;AASLC,IAAAA,eAAe,EAAEV,MAAM,CAACb,GAAG,CAACwB,eAAL;AATlB,GAAP;AAWD","sourcesContent":["import { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport const createStat = configure(api => {\n  async function stat(options = {}) {\n    const res = await api.post('bitswap/stat', {\n      searchParams: toUrlSearchParams(options),\n      signal: options.signal,\n      headers: options.headers\n    });\n    return toCoreInterface(await res.json());\n  }\n  return stat;\n});\nfunction toCoreInterface(res) {\n  return {\n    provideBufLen: res.ProvideBufLen,\n    wantlist: (res.Wantlist || []).map(k => CID.parse(k['/'])),\n    peers: res.Peers || [],\n    blocksReceived: BigInt(res.BlocksReceived),\n    dataReceived: BigInt(res.DataReceived),\n    blocksSent: BigInt(res.BlocksSent),\n    dataSent: BigInt(res.DataSent),\n    dupBlksReceived: BigInt(res.DupBlksReceived),\n    dupDataReceived: BigInt(res.DupDataReceived)\n  };\n}"]},"metadata":{},"sourceType":"module"}